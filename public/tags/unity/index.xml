<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unity on Abhishta</title>
    <link>https://abhishtagatya.github.io/tags/unity/</link>
    <description>Recent content in Unity on Abhishta</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 14 Sep 2025 00:00:00 +0100</lastBuildDate>
    <atom:link href="https://abhishtagatya.github.io/tags/unity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a Keyboard &amp; Mouse Sprite Animation Library</title>
      <link>https://abhishtagatya.github.io/posts/building-a-keyboard-mouse-sprite-animation-library/</link>
      <pubDate>Sun, 14 Sep 2025 00:00:00 +0100</pubDate>
      <guid>https://abhishtagatya.github.io/posts/building-a-keyboard-mouse-sprite-animation-library/</guid>
      <description>&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;&#xA;      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/MqrS7fHO6UY?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;&lt;h3 id=&#34;tldr&#34;&gt;TL;DR&lt;/h3&gt;&#xA;&lt;p&gt;This started as a small project to create a few sprites and a simple system for my game &lt;em&gt;Quality Assurance&lt;/em&gt; to handle sprite animations for CTAs. It grew into a fully modular animation library for Unity.&lt;/p&gt;&#xA;&lt;p&gt;The library is lightweight and fast, packed with 13+ base animations (Pulse, Slide, Node, Fade, etc.). All animations are modular and can be combined to create more complex effects. You can also script your own animations and run them through the library for easy management.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building a Custom Color Tag Encoding Pass in Unity URP</title>
      <link>https://abhishtagatya.github.io/posts/building-a-custom-color-tag-encoding-pass-in-unity-urp/</link>
      <pubDate>Tue, 05 Aug 2025 00:00:00 +0100</pubDate>
      <guid>https://abhishtagatya.github.io/posts/building-a-custom-color-tag-encoding-pass-in-unity-urp/</guid>
      <description>&lt;style&gt;&#xA;  &#xA;#masonry-998498ee511271a4c09fe918aa9d3792-1 {&#xA;  width: 100%;&#xA;}&#xA;&#xA;#masonry-998498ee511271a4c09fe918aa9d3792-1 .masonry-container {&#xA;  width: 100%;&#xA;  position: relative;&#xA;}&#xA;&#xA;#masonry-998498ee511271a4c09fe918aa9d3792-1 .masonry-item {&#xA;  display: inline-block;&#xA;  width: 100%;&#xA;  margin-bottom: 15px;&#xA;  break-inside: avoid;&#xA;  box-sizing: border-box;&#xA;}&#xA;&#xA;#masonry-998498ee511271a4c09fe918aa9d3792-1 .masonry-item img {&#xA;  width: 100%;&#xA;  height: auto;&#xA;  display: block;&#xA;  transition: transform 0.3s ease-in-out;&#xA;  border-radius: 0.5rem;&#xA;}&#xA;&#xA;#masonry-998498ee511271a4c09fe918aa9d3792-1 .glightbox {&#xA;  display: block;&#xA;  text-decoration: none;&#xA;  overflow: hidden;&#xA;  cursor: pointer;&#xA;  border-radius: 0.5rem;&#xA;}&#xA;&#xA;#masonry-998498ee511271a4c09fe918aa9d3792-1 .glightbox:hover,&#xA;#masonry-998498ee511271a4c09fe918aa9d3792-1 .glightbox:focus {&#xA;  text-decoration: none;&#xA;  outline: none;&#xA;}&#xA;&#xA;#masonry-998498ee511271a4c09fe918aa9d3792-1 .masonry-item:hover img {&#xA;  transform: scale(1.05);&#xA;}&#xA;&#xA;#masonry-998498ee511271a4c09fe918aa9d3792-1 .masonry-item {&#xA;  overflow: hidden;&#xA;  border-radius: 0.5rem;&#xA;}&#xA;&lt;/style&gt;&#xA;&#xA;&lt;div class=&#34;masonry-gallery&#34; &#xA;     id=&#34;masonry-998498ee511271a4c09fe918aa9d3792-1&#34;&#xA;     data-columns=&#34;2&#34;&#xA;     data-gutter=&#34;15&#34;&#xA;     data-animate=&#34;true&#34;&#xA;     data-use-transform=&#34;true&#34;&#xA;     data-center=&#34;true&#34;&#xA;     data-max-columns=&#34;5&#34;&#xA;     data-lightbox=&#34;true&#34;&gt;&#xA;&#xA;  &lt;div class=&#34;masonry-container&#34;&gt;&#xA;    &lt;div class=&#34;masonry-item&#34;&gt;&lt;a href=&#34;https://abhishtagatya.github.io/posts/building-a-custom-color-tag-encoding-pass-in-unity-urp/snapshot-a.png&#34; &#xA;             class=&#34;glightbox&#34;&#xA;             data-gallery=&#34;masonry-998498ee511271a4c09fe918aa9d3792-1&#34;&gt;&#xA;            &#xA;            &lt;img&#xA;    src=&#34;https://abhishtagatya.github.io/posts/building-a-custom-color-tag-encoding-pass-in-unity-urp/snapshot-a.png&#34;&#xA;    alt=&#34;&#34;&#xA;    &#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;2880&#34;&#xA;    height=&#34;1800&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;https://abhishtagatya.github.io/posts/building-a-custom-color-tag-encoding-pass-in-unity-urp/snapshot-a.png&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;masonry-item&#34;&gt;&lt;a href=&#34;https://abhishtagatya.github.io/posts/building-a-custom-color-tag-encoding-pass-in-unity-urp/cover.png&#34; &#xA;             class=&#34;glightbox&#34;&#xA;             data-gallery=&#34;masonry-998498ee511271a4c09fe918aa9d3792-1&#34;&gt;&#xA;            &#xA;            &lt;img&#xA;    src=&#34;https://abhishtagatya.github.io/posts/building-a-custom-color-tag-encoding-pass-in-unity-urp/cover.png&#34;&#xA;    alt=&#34;&#34;&#xA;    &#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;2880&#34;&#xA;    height=&#34;1800&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;https://abhishtagatya.github.io/posts/building-a-custom-color-tag-encoding-pass-in-unity-urp/cover.png&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;script&gt;&#xA;(function() {&#xA;  const containerId = &#39;masonry-998498ee511271a4c09fe918aa9d3792-1&#39;;&#xA;  const config = {&#xA;    columns:  2 ,&#xA;    gutter:  15 ,&#xA;    maxColumns:  5 ,&#xA;    lightbox:  true ,&#xA;    animate: &#34;true&#34;,&#xA;    useTransform: &#34;true&#34;,&#xA;    center: &#34;true&#34;&#xA;  };&#xA;  &#xA;  console.log(&#39;Initializing masonry gallery:&#39;, containerId, config);&#xA;  &#xA;  function initMasonryGallery() {&#xA;    const container = document.getElementById(containerId);&#xA;    if (!container) {&#xA;      console.error(&#39;Masonry container not found:&#39;, containerId);&#xA;      return;&#xA;    }&#xA;    &#xA;    const masonryContainer = container.querySelector(&#39;.masonry-container&#39;);&#xA;    if (!masonryContainer) {&#xA;      console.error(&#39;Masonry inner container not found&#39;);&#xA;      return;&#xA;    }&#xA;    &#xA;    &#xA;    if (typeof Macy === &#39;undefined&#39;) {&#xA;      console.error(&#39;Macy.js not loaded&#39;);&#xA;      return;&#xA;    }&#xA;    &#xA;    console.log(&#39;Found container and Macy, initializing...&#39;);&#xA;    &#xA;    &#xA;    try {&#xA;      const macyInstance = Macy({&#xA;        container: masonryContainer,&#xA;        trueOrder: false,&#xA;        waitForImages: true,&#xA;        useOwnImageLoader: false,&#xA;        debug: false,&#xA;        mobileFirst: true,&#xA;        columns: config.columns,&#xA;        margin: {&#xA;          x: config.gutter,&#xA;          y: config.gutter&#xA;        },&#xA;        breakAt: {&#xA;          1400: Math.min(config.maxColumns, config.columns),&#xA;          1200: Math.min(config.maxColumns, config.columns),&#xA;          940: Math.min(config.maxColumns, config.columns),  &#xA;          768: Math.min(3, config.columns),&#xA;          520: Math.min(2, config.columns),&#xA;          400: 1&#xA;        }&#xA;      });&#xA;      &#xA;      console.log(&#39;Macy initialized successfully for&#39;, containerId);&#xA;      &#xA;      &#xA;      const images = masonryContainer.querySelectorAll(&#39;img&#39;);&#xA;      let loadedImages = 0;&#xA;      const totalImages = images.length;&#xA;      &#xA;      function onImageLoad() {&#xA;        loadedImages++;&#xA;        console.log(`Image ${loadedImages}/${totalImages} loaded`);&#xA;        &#xA;        if (loadedImages === totalImages) {&#xA;          setTimeout(() =&gt; {&#xA;            if (macyInstance &amp;&amp; macyInstance.reCalculate) {&#xA;              macyInstance.reCalculate(true);&#xA;              console.log(&#39;Macy layout recalculated after all images loaded&#39;);&#xA;            }&#xA;          }, 100);&#xA;        }&#xA;      }&#xA;      &#xA;      images.forEach(img =&gt; {&#xA;        if (img.complete) {&#xA;          onImageLoad();&#xA;        } else {&#xA;          img.addEventListener(&#39;load&#39;, onImageLoad);&#xA;          img.addEventListener(&#39;error&#39;, onImageLoad);&#xA;        }&#xA;      });&#xA;      &#xA;    } catch (error) {&#xA;      console.error(&#39;Error initializing Macy:&#39;, error);&#xA;    }&#xA;    &#xA;    &#xA;    if (config.lightbox) {&#xA;      if (typeof GLightbox !== &#39;undefined&#39;) {&#xA;        try {&#xA;          &#xA;          let globalLightboxConfig = window.HUGO_GALLERY_CONFIG?.lightbox_options || {};&#xA;          &#xA;          if (typeof globalLightboxConfig === &#39;string&#39;) {&#xA;            try {&#xA;              globalLightboxConfig = JSON.parse(globalLightboxConfig);&#xA;            } catch (e) {&#xA;              console.error(&#39;Error parsing masonry GLightbox config:&#39;, e);&#xA;              globalLightboxConfig = {};&#xA;            }&#xA;          }          &#xA;          const lightbox = GLightbox({&#xA;            selector: `#${containerId} .glightbox`,&#xA;            touchNavigation: globalLightboxConfig.touchnavigation ?? globalLightboxConfig.touchNavigation ?? true,&#xA;            loop: globalLightboxConfig.loop ?? true,&#xA;            draggable: globalLightboxConfig.draggable ?? true,&#xA;            zoomable: globalLightboxConfig.zoomable ?? true,&#xA;            preload: globalLightboxConfig.preload ?? true,&#xA;            width: globalLightboxConfig.width || &#39;90vw&#39;,&#xA;            height: globalLightboxConfig.height || &#39;90vh&#39;,&#xA;            descPosition: globalLightboxConfig.descposition || globalLightboxConfig.descPosition || &#39;bottom&#39;,&#xA;            onOpen: () =&gt; {&#xA;              console.log(&#39;GLightbox opened for&#39;, containerId);&#xA;            }&#xA;          });&#xA;          &#xA;          console.log(&#39;GLightbox initialized successfully for&#39;, containerId, &#39;with global config&#39;);&#xA;          &#xA;        } catch (error) {&#xA;          console.error(&#39;Error initializing GLightbox:&#39;, error);&#xA;        }&#xA;      } else {&#xA;        console.error(&#39;GLightbox not loaded but lightbox is enabled&#39;);&#xA;      }&#xA;    }&#xA;  }&#xA;  &#xA;  &#xA;  function waitForLibraries() {&#xA;    let attempts = 0;&#xA;    const maxAttempts = 50;&#xA;    &#xA;    function check() {&#xA;      attempts++;&#xA;      &#xA;      const macyReady = typeof Macy !== &#39;undefined&#39;;&#xA;      const lightboxReady = !config.lightbox || typeof GLightbox !== &#39;undefined&#39;;&#xA;      &#xA;      if (macyReady &amp;&amp; lightboxReady) {&#xA;        initMasonryGallery();&#xA;      } else if (attempts &lt; maxAttempts) {&#xA;        setTimeout(check, 100);&#xA;      } else {&#xA;        console.error(&#39;Timeout waiting for libraries. Macy:&#39;, macyReady, &#39;GLightbox:&#39;, lightboxReady);&#xA;      }&#xA;    }&#xA;    &#xA;    check();&#xA;  }&#xA;  &#xA;  &#xA;  if (document.readyState === &#39;loading&#39;) {&#xA;    document.addEventListener(&#39;DOMContentLoaded&#39;, waitForLibraries);&#xA;  } else {&#xA;    setTimeout(waitForLibraries, 50);&#xA;  }&#xA;})();&#xA;&lt;/script&gt;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;In my game &lt;em&gt;Quality Assurance&lt;/em&gt;, I needed a system to &lt;strong&gt;tag objects with colors&lt;/strong&gt; and later sample that information for gameplay mechanics. Crucially, this information needed to be &lt;strong&gt;hidden from the player&lt;/strong&gt;, so it must be rendered off-screen.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Realistic Wave Simulation in Unity URP</title>
      <link>https://abhishtagatya.github.io/posts/realistic-wave-simulation-in-unity-urp/</link>
      <pubDate>Sat, 14 Jun 2025 00:00:00 +0100</pubDate>
      <guid>https://abhishtagatya.github.io/posts/realistic-wave-simulation-in-unity-urp/</guid>
      <description>&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;&#xA;      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/VeVeaHHpKKU?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;This project is a &lt;strong&gt;custom water shader&lt;/strong&gt; written in HLSL for the Universal Render Pipeline (URP). It simulates dynamic waves with configurable functions, domain warping, and physically-inspired lighting, enabling both stylized and semi-realistic water rendering.&lt;/p&gt;&#xA;&lt;h3 id=&#34;core-features&#34;&gt;Core Features&lt;/h3&gt;&#xA;&lt;h4 id=&#34;wave-simulation&#34;&gt;Wave Simulation&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Supports &lt;strong&gt;sine&lt;/strong&gt; and &lt;strong&gt;exponent-based&lt;/strong&gt; wave functions.&lt;/li&gt;&#xA;&lt;li&gt;Multiple overlapping waves can be combined with adjustable &lt;strong&gt;frequency&lt;/strong&gt;, &lt;strong&gt;speed&lt;/strong&gt;, &lt;strong&gt;amplitude&lt;/strong&gt;, and &lt;strong&gt;wave count&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Domain warping&lt;/strong&gt; adds natural randomness and complexity to wave motion.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;normal-reconstruction&#34;&gt;Normal Reconstruction&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Normals are recalculated using central differences for more accurate lighting.&lt;/li&gt;&#xA;&lt;li&gt;Produces realistic reflections and specular highlights that respond to wave motion.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;lighting-and-reflections&#34;&gt;Lighting and Reflections&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Configurable between &lt;strong&gt;PBR lighting&lt;/strong&gt; and &lt;strong&gt;Blinn-Phong&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Supports &lt;strong&gt;environment reflections&lt;/strong&gt; via a cubemap.&lt;/li&gt;&#xA;&lt;li&gt;Adjustable smoothness, metallic, and specular controls for fine-tuning water appearance.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;customization-parameters&#34;&gt;Customization Parameters&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Wave Settings&lt;/strong&gt;: Count, frequency, speed, amplitude.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Warp Settings&lt;/strong&gt;: Frequency, amplitude, speed.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Material Settings&lt;/strong&gt;: Base color, metallic, smoothness, occlusion, specular highlights, and reflection intensity.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;&#xA;&lt;p&gt;The shader demonstrates how to blend &lt;strong&gt;procedural wave displacement&lt;/strong&gt; with &lt;strong&gt;reflection-based lighting&lt;/strong&gt; to simulate believable water surfaces in Unity. By layering domain-warped waves and combining multiple lighting models, it balances flexibility, realism, and artistic control for interactive environments.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Visualizing Brno in Unity</title>
      <link>https://abhishtagatya.github.io/posts/visualizing-brno-in-unity/</link>
      <pubDate>Thu, 15 May 2025 00:00:00 +0100</pubDate>
      <guid>https://abhishtagatya.github.io/posts/visualizing-brno-in-unity/</guid>
      <description>&lt;style&gt;&#xA;  &#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 {&#xA;  width: 100%;&#xA;}&#xA;&#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 .masonry-container {&#xA;  width: 100%;&#xA;  position: relative;&#xA;}&#xA;&#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 .masonry-item {&#xA;  display: inline-block;&#xA;  width: 100%;&#xA;  margin-bottom: 15px;&#xA;  break-inside: avoid;&#xA;  box-sizing: border-box;&#xA;}&#xA;&#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 .masonry-item img {&#xA;  width: 100%;&#xA;  height: auto;&#xA;  display: block;&#xA;  transition: transform 0.3s ease-in-out;&#xA;  border-radius: 0.5rem;&#xA;}&#xA;&#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 .glightbox {&#xA;  display: block;&#xA;  text-decoration: none;&#xA;  overflow: hidden;&#xA;  cursor: pointer;&#xA;  border-radius: 0.5rem;&#xA;}&#xA;&#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 .glightbox:hover,&#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 .glightbox:focus {&#xA;  text-decoration: none;&#xA;  outline: none;&#xA;}&#xA;&#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 .masonry-item:hover img {&#xA;  transform: scale(1.05);&#xA;}&#xA;&#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 .masonry-item {&#xA;  overflow: hidden;&#xA;  border-radius: 0.5rem;&#xA;}&#xA;&lt;/style&gt;&#xA;&#xA;&lt;div class=&#34;masonry-gallery&#34; &#xA;     id=&#34;masonry-0b8f0d8456b9e4543b946041e42eaca9-1&#34;&#xA;     data-columns=&#34;3&#34;&#xA;     data-gutter=&#34;15&#34;&#xA;     data-animate=&#34;true&#34;&#xA;     data-use-transform=&#34;true&#34;&#xA;     data-center=&#34;true&#34;&#xA;     data-max-columns=&#34;5&#34;&#xA;     data-lightbox=&#34;true&#34;&gt;&#xA;&#xA;  &lt;div class=&#34;masonry-container&#34;&gt;&#xA;    &lt;div class=&#34;masonry-item&#34;&gt;&lt;a href=&#34;https://abhishtagatya.github.io/posts/visualizing-brno-in-unity/preview.png&#34; &#xA;             class=&#34;glightbox&#34;&#xA;             data-gallery=&#34;masonry-0b8f0d8456b9e4543b946041e42eaca9-1&#34;data-description=&#34;&lt;h4&gt;GISMU Snapshot #1&lt;/h4&gt;&#34;&gt;&#xA;            &#xA;            &lt;img&#xA;    src=&#34;https://abhishtagatya.github.io/posts/visualizing-brno-in-unity/preview.png&#34;&#xA;    alt=&#34;&#34;&#xA;    title=&#34;GISMU Snapshot #1&#34;&#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;1919&#34;&#xA;    height=&#34;1079&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;https://abhishtagatya.github.io/posts/visualizing-brno-in-unity/preview.png&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;GISMU Snapshot #1&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;masonry-item&#34;&gt;&lt;a href=&#34;https://abhishtagatya.github.io/posts/visualizing-brno-in-unity/snapshot-a.png&#34; &#xA;             class=&#34;glightbox&#34;&#xA;             data-gallery=&#34;masonry-0b8f0d8456b9e4543b946041e42eaca9-1&#34;data-description=&#34;&lt;h4&gt;GISMU Snapshot #2&lt;/h4&gt;&#34;&gt;&#xA;            &#xA;            &lt;img&#xA;    src=&#34;https://abhishtagatya.github.io/posts/visualizing-brno-in-unity/snapshot-a.png&#34;&#xA;    alt=&#34;&#34;&#xA;    title=&#34;GISMU Snapshot #2&#34;&#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;1919&#34;&#xA;    height=&#34;1079&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;https://abhishtagatya.github.io/posts/visualizing-brno-in-unity/snapshot-a.png&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;GISMU Snapshot #2&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;masonry-item&#34;&gt;&lt;a href=&#34;https://abhishtagatya.github.io/posts/visualizing-brno-in-unity/snapshot-b.png&#34; &#xA;             class=&#34;glightbox&#34;&#xA;             data-gallery=&#34;masonry-0b8f0d8456b9e4543b946041e42eaca9-1&#34;data-description=&#34;&lt;h4&gt;GISMU Snapshot #3&lt;/h4&gt;&#34;&gt;&#xA;            &#xA;            &lt;img&#xA;    src=&#34;https://abhishtagatya.github.io/posts/visualizing-brno-in-unity/snapshot-b.png&#34;&#xA;    alt=&#34;&#34;&#xA;    title=&#34;GISMU Snapshot #3&#34;&#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;1919&#34;&#xA;    height=&#34;1079&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;https://abhishtagatya.github.io/posts/visualizing-brno-in-unity/snapshot-b.png&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;GISMU Snapshot #3&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;script&gt;&#xA;(function() {&#xA;  const containerId = &#39;masonry-0b8f0d8456b9e4543b946041e42eaca9-1&#39;;&#xA;  const config = {&#xA;    columns:  3 ,&#xA;    gutter:  15 ,&#xA;    maxColumns:  5 ,&#xA;    lightbox:  true ,&#xA;    animate: &#34;true&#34;,&#xA;    useTransform: &#34;true&#34;,&#xA;    center: &#34;true&#34;&#xA;  };&#xA;  &#xA;  console.log(&#39;Initializing masonry gallery:&#39;, containerId, config);&#xA;  &#xA;  function initMasonryGallery() {&#xA;    const container = document.getElementById(containerId);&#xA;    if (!container) {&#xA;      console.error(&#39;Masonry container not found:&#39;, containerId);&#xA;      return;&#xA;    }&#xA;    &#xA;    const masonryContainer = container.querySelector(&#39;.masonry-container&#39;);&#xA;    if (!masonryContainer) {&#xA;      console.error(&#39;Masonry inner container not found&#39;);&#xA;      return;&#xA;    }&#xA;    &#xA;    &#xA;    if (typeof Macy === &#39;undefined&#39;) {&#xA;      console.error(&#39;Macy.js not loaded&#39;);&#xA;      return;&#xA;    }&#xA;    &#xA;    console.log(&#39;Found container and Macy, initializing...&#39;);&#xA;    &#xA;    &#xA;    try {&#xA;      const macyInstance = Macy({&#xA;        container: masonryContainer,&#xA;        trueOrder: false,&#xA;        waitForImages: true,&#xA;        useOwnImageLoader: false,&#xA;        debug: false,&#xA;        mobileFirst: true,&#xA;        columns: config.columns,&#xA;        margin: {&#xA;          x: config.gutter,&#xA;          y: config.gutter&#xA;        },&#xA;        breakAt: {&#xA;          1400: Math.min(config.maxColumns, config.columns),&#xA;          1200: Math.min(config.maxColumns, config.columns),&#xA;          940: Math.min(config.maxColumns, config.columns),  &#xA;          768: Math.min(3, config.columns),&#xA;          520: Math.min(2, config.columns),&#xA;          400: 1&#xA;        }&#xA;      });&#xA;      &#xA;      console.log(&#39;Macy initialized successfully for&#39;, containerId);&#xA;      &#xA;      &#xA;      const images = masonryContainer.querySelectorAll(&#39;img&#39;);&#xA;      let loadedImages = 0;&#xA;      const totalImages = images.length;&#xA;      &#xA;      function onImageLoad() {&#xA;        loadedImages++;&#xA;        console.log(`Image ${loadedImages}/${totalImages} loaded`);&#xA;        &#xA;        if (loadedImages === totalImages) {&#xA;          setTimeout(() =&gt; {&#xA;            if (macyInstance &amp;&amp; macyInstance.reCalculate) {&#xA;              macyInstance.reCalculate(true);&#xA;              console.log(&#39;Macy layout recalculated after all images loaded&#39;);&#xA;            }&#xA;          }, 100);&#xA;        }&#xA;      }&#xA;      &#xA;      images.forEach(img =&gt; {&#xA;        if (img.complete) {&#xA;          onImageLoad();&#xA;        } else {&#xA;          img.addEventListener(&#39;load&#39;, onImageLoad);&#xA;          img.addEventListener(&#39;error&#39;, onImageLoad);&#xA;        }&#xA;      });&#xA;      &#xA;    } catch (error) {&#xA;      console.error(&#39;Error initializing Macy:&#39;, error);&#xA;    }&#xA;    &#xA;    &#xA;    if (config.lightbox) {&#xA;      if (typeof GLightbox !== &#39;undefined&#39;) {&#xA;        try {&#xA;          &#xA;          let globalLightboxConfig = window.HUGO_GALLERY_CONFIG?.lightbox_options || {};&#xA;          &#xA;          if (typeof globalLightboxConfig === &#39;string&#39;) {&#xA;            try {&#xA;              globalLightboxConfig = JSON.parse(globalLightboxConfig);&#xA;            } catch (e) {&#xA;              console.error(&#39;Error parsing masonry GLightbox config:&#39;, e);&#xA;              globalLightboxConfig = {};&#xA;            }&#xA;          }          &#xA;          const lightbox = GLightbox({&#xA;            selector: `#${containerId} .glightbox`,&#xA;            touchNavigation: globalLightboxConfig.touchnavigation ?? globalLightboxConfig.touchNavigation ?? true,&#xA;            loop: globalLightboxConfig.loop ?? true,&#xA;            draggable: globalLightboxConfig.draggable ?? true,&#xA;            zoomable: globalLightboxConfig.zoomable ?? true,&#xA;            preload: globalLightboxConfig.preload ?? true,&#xA;            width: globalLightboxConfig.width || &#39;90vw&#39;,&#xA;            height: globalLightboxConfig.height || &#39;90vh&#39;,&#xA;            descPosition: globalLightboxConfig.descposition || globalLightboxConfig.descPosition || &#39;bottom&#39;,&#xA;            onOpen: () =&gt; {&#xA;              console.log(&#39;GLightbox opened for&#39;, containerId);&#xA;            }&#xA;          });&#xA;          &#xA;          console.log(&#39;GLightbox initialized successfully for&#39;, containerId, &#39;with global config&#39;);&#xA;          &#xA;        } catch (error) {&#xA;          console.error(&#39;Error initializing GLightbox:&#39;, error);&#xA;        }&#xA;      } else {&#xA;        console.error(&#39;GLightbox not loaded but lightbox is enabled&#39;);&#xA;      }&#xA;    }&#xA;  }&#xA;  &#xA;  &#xA;  function waitForLibraries() {&#xA;    let attempts = 0;&#xA;    const maxAttempts = 50;&#xA;    &#xA;    function check() {&#xA;      attempts++;&#xA;      &#xA;      const macyReady = typeof Macy !== &#39;undefined&#39;;&#xA;      const lightboxReady = !config.lightbox || typeof GLightbox !== &#39;undefined&#39;;&#xA;      &#xA;      if (macyReady &amp;&amp; lightboxReady) {&#xA;        initMasonryGallery();&#xA;      } else if (attempts &lt; maxAttempts) {&#xA;        setTimeout(check, 100);&#xA;      } else {&#xA;        console.error(&#39;Timeout waiting for libraries. Macy:&#39;, macyReady, &#39;GLightbox:&#39;, lightboxReady);&#xA;      }&#xA;    }&#xA;    &#xA;    check();&#xA;  }&#xA;  &#xA;  &#xA;  if (document.readyState === &#39;loading&#39;) {&#xA;    document.addEventListener(&#39;DOMContentLoaded&#39;, waitForLibraries);&#xA;  } else {&#xA;    setTimeout(waitForLibraries, 50);&#xA;  }&#xA;})();&#xA;&lt;/script&gt;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;During my time at &lt;strong&gt;HCILab&lt;/strong&gt;, under the supervision of &lt;strong&gt;Jonas Rosecký&lt;/strong&gt;, I developed &lt;strong&gt;GISMU&lt;/strong&gt;, a Unity-based system for visualizing geospatial data in 3D. The project focused on Brno, CZ, exploring how terrain, transport, and infrastructure data could be transformed into an interactive environment — with future potential for VR exploration.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
