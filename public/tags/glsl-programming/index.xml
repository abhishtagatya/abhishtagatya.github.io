<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GLSL Programming on Abhishta</title>
    <link>http://localhost:58596/tags/glsl-programming/</link>
    <description>Recent content in GLSL Programming on Abhishta</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 05 Apr 2025 00:00:00 +0100</lastBuildDate>
    <atom:link href="http://localhost:58596/tags/glsl-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Making Procedural Clouds using Stacked Perlin in GLSL</title>
      <link>http://localhost:58596/posts/making-procedural-clouds-using-stacked-perlin-in-glsl/</link>
      <pubDate>Sat, 05 Apr 2025 00:00:00 +0100</pubDate>
      <guid>http://localhost:58596/posts/making-procedural-clouds-using-stacked-perlin-in-glsl/</guid>
      <description>&lt;p&gt;&#xA;&lt;figure class=&#34;image-figure not-prose my-8&#34; &#xA;        data-lightbox-enabled=&#34;true&#34;&#xA;        data-gallery-type=&#34;auto&#34;&gt;&#xA;  &lt;div class=&#34;image-container&#34;&gt;&#xA;    &lt;img&#xA;    src=&#34;http://localhost:58596/posts/making-procedural-clouds-using-stacked-perlin-in-glsl/demo.gif&#34;&#xA;    alt=&#34;&#34;&#xA;    title=&#34;Preview (https://www.shadertoy.com/view/W3BGRm)&#34;&#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;1280&#34;&#xA;    height=&#34;720&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;http://localhost:58596/posts/making-procedural-clouds-using-stacked-perlin-in-glsl/demo.gif&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;Preview (https://www.shadertoy.com/view/W3BGRm)&#34; /&gt;&lt;/div&gt;&#xA;&#xA;  &lt;figcaption class=&#34;image-caption&#34;&gt;&#xA;      Preview (&lt;a href=&#34;https://www.shadertoy.com/view/W3BGRm&#34;target=&#34;_blank&#34;&#xA;  class=&#34;relative inline-flex items-center&#34;&#xA;&gt;https://www.shadertoy.com/view/W3BGRm&#xA;  &lt;svg id=&#34;external-link&#34; class=&#34;h-3 w-3 ml-1 absolute top-0 right-0 transform translate-x-2/5 -translate-y-1/3&#34;&#xA;    fill=&#34;none&#34;&#xA;    stroke=&#34;currentColor&#34;&#xA;    viewBox=&#34;0 0 24 24&#34;&gt;&lt;path fill=&#34;none&#34; stroke=&#34;currentColor&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; stroke-width=&#34;2&#34; d=&#34;M15 3h6v6m-11 5L21 3m-3 10v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6&#34;/&gt;&lt;/svg&gt;&#xA;&lt;/a&gt;)&#xA;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;This shader creates a &lt;strong&gt;dynamic sky with drifting clouds&lt;/strong&gt; using &lt;strong&gt;Perlin noise&lt;/strong&gt; and layered blending techniques. Instead of relying on bitmap textures, it generates everything procedurally, making it scalable and resolution-independent.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Making Batik in GLSL</title>
      <link>http://localhost:58596/posts/making-batik-in-glsl/</link>
      <pubDate>Sun, 02 Mar 2025 00:00:00 +0100</pubDate>
      <guid>http://localhost:58596/posts/making-batik-in-glsl/</guid>
      <description>&lt;p&gt;&#xA;&lt;figure class=&#34;image-figure not-prose my-8&#34; &#xA;        data-lightbox-enabled=&#34;true&#34;&#xA;        data-gallery-type=&#34;auto&#34;&gt;&#xA;  &lt;div class=&#34;image-container&#34;&gt;&#xA;    &lt;img&#xA;    src=&#34;http://localhost:58596/posts/making-batik-in-glsl/demo.gif&#34;&#xA;    alt=&#34;&#34;&#xA;    title=&#34;Preview (https://www.shadertoy.com/view/3csXW4)&#34;&#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;1280&#34;&#xA;    height=&#34;720&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;http://localhost:58596/posts/making-batik-in-glsl/demo.gif&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;Preview (https://www.shadertoy.com/view/3csXW4)&#34; /&gt;&lt;/div&gt;&#xA;&#xA;  &lt;figcaption class=&#34;image-caption&#34;&gt;&#xA;      Preview (&lt;a href=&#34;https://www.shadertoy.com/view/3csXW4&#34;target=&#34;_blank&#34;&#xA;  class=&#34;relative inline-flex items-center&#34;&#xA;&gt;https://www.shadertoy.com/view/3csXW4&#xA;  &lt;svg id=&#34;external-link&#34; class=&#34;h-3 w-3 ml-1 absolute top-0 right-0 transform translate-x-2/5 -translate-y-1/3&#34;&#xA;    fill=&#34;none&#34;&#xA;    stroke=&#34;currentColor&#34;&#xA;    viewBox=&#34;0 0 24 24&#34;&gt;&lt;path fill=&#34;none&#34; stroke=&#34;currentColor&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; stroke-width=&#34;2&#34; d=&#34;M15 3h6v6m-11 5L21 3m-3 10v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6&#34;/&gt;&lt;/svg&gt;&#xA;&lt;/a&gt;)&#xA;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;This project explores the generative expression of &lt;strong&gt;Batik&lt;/strong&gt;, a traditional Indonesian textile art, through GLSL shaders. By using noise functions, trigonometric patterns, and domain warping, the shader recreates floral and geometric motifs that resemble Batik designs in a dynamic, procedural form.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
