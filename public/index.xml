<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Abhishta</title>
    <link>http://localhost:1313/</link>
    <description>Recent content in Home on Abhishta</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 14 Sep 2025 00:00:00 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a Keyboard &amp; Mouse Sprite Animation Library</title>
      <link>http://localhost:1313/posts/building-a-keyboard-mouse-sprite-animation-library/</link>
      <pubDate>Sun, 14 Sep 2025 00:00:00 +0100</pubDate>
      <guid>http://localhost:1313/posts/building-a-keyboard-mouse-sprite-animation-library/</guid>
      <description>&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;&#xA;      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/MqrS7fHO6UY?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;&lt;h3 id=&#34;tldr&#34;&gt;TL;DR&lt;/h3&gt;&#xA;&lt;p&gt;This started as a small project to create a few sprites and a simple system for my game &lt;em&gt;Quality Assurance&lt;/em&gt; to handle sprite animations for CTAs. It grew into a fully modular animation library for Unity.&lt;/p&gt;&#xA;&lt;p&gt;The library is lightweight and fast, packed with 13+ base animations (Pulse, Slide, Node, Fade, etc.). All animations are modular and can be combined to create more complex effects. You can also script your own animations and run them through the library for easy management.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building a Custom Color Tag Encoding Pass in Unity URP</title>
      <link>http://localhost:1313/posts/building-a-custom-color-tag-encoding-pass-in-unity-urp/</link>
      <pubDate>Tue, 05 Aug 2025 00:00:00 +0100</pubDate>
      <guid>http://localhost:1313/posts/building-a-custom-color-tag-encoding-pass-in-unity-urp/</guid>
      <description>&lt;style&gt;&#xA;  &#xA;#masonry-998498ee511271a4c09fe918aa9d3792-1 {&#xA;  width: 100%;&#xA;}&#xA;&#xA;#masonry-998498ee511271a4c09fe918aa9d3792-1 .masonry-container {&#xA;  width: 100%;&#xA;  position: relative;&#xA;}&#xA;&#xA;#masonry-998498ee511271a4c09fe918aa9d3792-1 .masonry-item {&#xA;  display: inline-block;&#xA;  width: 100%;&#xA;  margin-bottom: 15px;&#xA;  break-inside: avoid;&#xA;  box-sizing: border-box;&#xA;}&#xA;&#xA;#masonry-998498ee511271a4c09fe918aa9d3792-1 .masonry-item img {&#xA;  width: 100%;&#xA;  height: auto;&#xA;  display: block;&#xA;  transition: transform 0.3s ease-in-out;&#xA;  border-radius: 0.5rem;&#xA;}&#xA;&#xA;#masonry-998498ee511271a4c09fe918aa9d3792-1 .glightbox {&#xA;  display: block;&#xA;  text-decoration: none;&#xA;  overflow: hidden;&#xA;  cursor: pointer;&#xA;  border-radius: 0.5rem;&#xA;}&#xA;&#xA;#masonry-998498ee511271a4c09fe918aa9d3792-1 .glightbox:hover,&#xA;#masonry-998498ee511271a4c09fe918aa9d3792-1 .glightbox:focus {&#xA;  text-decoration: none;&#xA;  outline: none;&#xA;}&#xA;&#xA;#masonry-998498ee511271a4c09fe918aa9d3792-1 .masonry-item:hover img {&#xA;  transform: scale(1.05);&#xA;}&#xA;&#xA;#masonry-998498ee511271a4c09fe918aa9d3792-1 .masonry-item {&#xA;  overflow: hidden;&#xA;  border-radius: 0.5rem;&#xA;}&#xA;&lt;/style&gt;&#xA;&#xA;&lt;div class=&#34;masonry-gallery&#34; &#xA;     id=&#34;masonry-998498ee511271a4c09fe918aa9d3792-1&#34;&#xA;     data-columns=&#34;2&#34;&#xA;     data-gutter=&#34;15&#34;&#xA;     data-animate=&#34;true&#34;&#xA;     data-use-transform=&#34;true&#34;&#xA;     data-center=&#34;true&#34;&#xA;     data-max-columns=&#34;5&#34;&#xA;     data-lightbox=&#34;true&#34;&gt;&#xA;&#xA;  &lt;div class=&#34;masonry-container&#34;&gt;&#xA;    &lt;div class=&#34;masonry-item&#34;&gt;&lt;a href=&#34;http://localhost:1313/posts/building-a-custom-color-tag-encoding-pass-in-unity-urp/snapshot-a.png&#34; &#xA;             class=&#34;glightbox&#34;&#xA;             data-gallery=&#34;masonry-998498ee511271a4c09fe918aa9d3792-1&#34;&gt;&#xA;            &#xA;            &lt;img&#xA;    src=&#34;http://localhost:1313/posts/building-a-custom-color-tag-encoding-pass-in-unity-urp/snapshot-a.png&#34;&#xA;    alt=&#34;&#34;&#xA;    &#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;2880&#34;&#xA;    height=&#34;1800&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;http://localhost:1313/posts/building-a-custom-color-tag-encoding-pass-in-unity-urp/snapshot-a.png&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;masonry-item&#34;&gt;&lt;a href=&#34;http://localhost:1313/posts/building-a-custom-color-tag-encoding-pass-in-unity-urp/cover.png&#34; &#xA;             class=&#34;glightbox&#34;&#xA;             data-gallery=&#34;masonry-998498ee511271a4c09fe918aa9d3792-1&#34;&gt;&#xA;            &#xA;            &lt;img&#xA;    src=&#34;http://localhost:1313/posts/building-a-custom-color-tag-encoding-pass-in-unity-urp/cover.png&#34;&#xA;    alt=&#34;&#34;&#xA;    &#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;2880&#34;&#xA;    height=&#34;1800&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;http://localhost:1313/posts/building-a-custom-color-tag-encoding-pass-in-unity-urp/cover.png&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;script&gt;&#xA;(function() {&#xA;  const containerId = &#39;masonry-998498ee511271a4c09fe918aa9d3792-1&#39;;&#xA;  const config = {&#xA;    columns:  2 ,&#xA;    gutter:  15 ,&#xA;    maxColumns:  5 ,&#xA;    lightbox:  true ,&#xA;    animate: &#34;true&#34;,&#xA;    useTransform: &#34;true&#34;,&#xA;    center: &#34;true&#34;&#xA;  };&#xA;  &#xA;  console.log(&#39;Initializing masonry gallery:&#39;, containerId, config);&#xA;  &#xA;  function initMasonryGallery() {&#xA;    const container = document.getElementById(containerId);&#xA;    if (!container) {&#xA;      console.error(&#39;Masonry container not found:&#39;, containerId);&#xA;      return;&#xA;    }&#xA;    &#xA;    const masonryContainer = container.querySelector(&#39;.masonry-container&#39;);&#xA;    if (!masonryContainer) {&#xA;      console.error(&#39;Masonry inner container not found&#39;);&#xA;      return;&#xA;    }&#xA;    &#xA;    &#xA;    if (typeof Macy === &#39;undefined&#39;) {&#xA;      console.error(&#39;Macy.js not loaded&#39;);&#xA;      return;&#xA;    }&#xA;    &#xA;    console.log(&#39;Found container and Macy, initializing...&#39;);&#xA;    &#xA;    &#xA;    try {&#xA;      const macyInstance = Macy({&#xA;        container: masonryContainer,&#xA;        trueOrder: false,&#xA;        waitForImages: true,&#xA;        useOwnImageLoader: false,&#xA;        debug: false,&#xA;        mobileFirst: true,&#xA;        columns: config.columns,&#xA;        margin: {&#xA;          x: config.gutter,&#xA;          y: config.gutter&#xA;        },&#xA;        breakAt: {&#xA;          1400: Math.min(config.maxColumns, config.columns),&#xA;          1200: Math.min(config.maxColumns, config.columns),&#xA;          940: Math.min(config.maxColumns, config.columns),  &#xA;          768: Math.min(3, config.columns),&#xA;          520: Math.min(2, config.columns),&#xA;          400: 1&#xA;        }&#xA;      });&#xA;      &#xA;      console.log(&#39;Macy initialized successfully for&#39;, containerId);&#xA;      &#xA;      &#xA;      const images = masonryContainer.querySelectorAll(&#39;img&#39;);&#xA;      let loadedImages = 0;&#xA;      const totalImages = images.length;&#xA;      &#xA;      function onImageLoad() {&#xA;        loadedImages++;&#xA;        console.log(`Image ${loadedImages}/${totalImages} loaded`);&#xA;        &#xA;        if (loadedImages === totalImages) {&#xA;          setTimeout(() =&gt; {&#xA;            if (macyInstance &amp;&amp; macyInstance.reCalculate) {&#xA;              macyInstance.reCalculate(true);&#xA;              console.log(&#39;Macy layout recalculated after all images loaded&#39;);&#xA;            }&#xA;          }, 100);&#xA;        }&#xA;      }&#xA;      &#xA;      images.forEach(img =&gt; {&#xA;        if (img.complete) {&#xA;          onImageLoad();&#xA;        } else {&#xA;          img.addEventListener(&#39;load&#39;, onImageLoad);&#xA;          img.addEventListener(&#39;error&#39;, onImageLoad);&#xA;        }&#xA;      });&#xA;      &#xA;    } catch (error) {&#xA;      console.error(&#39;Error initializing Macy:&#39;, error);&#xA;    }&#xA;    &#xA;    &#xA;    if (config.lightbox) {&#xA;      if (typeof GLightbox !== &#39;undefined&#39;) {&#xA;        try {&#xA;          &#xA;          let globalLightboxConfig = window.HUGO_GALLERY_CONFIG?.lightbox_options || {};&#xA;          &#xA;          if (typeof globalLightboxConfig === &#39;string&#39;) {&#xA;            try {&#xA;              globalLightboxConfig = JSON.parse(globalLightboxConfig);&#xA;            } catch (e) {&#xA;              console.error(&#39;Error parsing masonry GLightbox config:&#39;, e);&#xA;              globalLightboxConfig = {};&#xA;            }&#xA;          }          &#xA;          const lightbox = GLightbox({&#xA;            selector: `#${containerId} .glightbox`,&#xA;            touchNavigation: globalLightboxConfig.touchnavigation ?? globalLightboxConfig.touchNavigation ?? true,&#xA;            loop: globalLightboxConfig.loop ?? true,&#xA;            draggable: globalLightboxConfig.draggable ?? true,&#xA;            zoomable: globalLightboxConfig.zoomable ?? true,&#xA;            preload: globalLightboxConfig.preload ?? true,&#xA;            width: globalLightboxConfig.width || &#39;90vw&#39;,&#xA;            height: globalLightboxConfig.height || &#39;90vh&#39;,&#xA;            descPosition: globalLightboxConfig.descposition || globalLightboxConfig.descPosition || &#39;bottom&#39;,&#xA;            onOpen: () =&gt; {&#xA;              console.log(&#39;GLightbox opened for&#39;, containerId);&#xA;            }&#xA;          });&#xA;          &#xA;          console.log(&#39;GLightbox initialized successfully for&#39;, containerId, &#39;with global config&#39;);&#xA;          &#xA;        } catch (error) {&#xA;          console.error(&#39;Error initializing GLightbox:&#39;, error);&#xA;        }&#xA;      } else {&#xA;        console.error(&#39;GLightbox not loaded but lightbox is enabled&#39;);&#xA;      }&#xA;    }&#xA;  }&#xA;  &#xA;  &#xA;  function waitForLibraries() {&#xA;    let attempts = 0;&#xA;    const maxAttempts = 50;&#xA;    &#xA;    function check() {&#xA;      attempts++;&#xA;      &#xA;      const macyReady = typeof Macy !== &#39;undefined&#39;;&#xA;      const lightboxReady = !config.lightbox || typeof GLightbox !== &#39;undefined&#39;;&#xA;      &#xA;      if (macyReady &amp;&amp; lightboxReady) {&#xA;        initMasonryGallery();&#xA;      } else if (attempts &lt; maxAttempts) {&#xA;        setTimeout(check, 100);&#xA;      } else {&#xA;        console.error(&#39;Timeout waiting for libraries. Macy:&#39;, macyReady, &#39;GLightbox:&#39;, lightboxReady);&#xA;      }&#xA;    }&#xA;    &#xA;    check();&#xA;  }&#xA;  &#xA;  &#xA;  if (document.readyState === &#39;loading&#39;) {&#xA;    document.addEventListener(&#39;DOMContentLoaded&#39;, waitForLibraries);&#xA;  } else {&#xA;    setTimeout(waitForLibraries, 50);&#xA;  }&#xA;})();&#xA;&lt;/script&gt;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;In my game &lt;em&gt;Quality Assurance&lt;/em&gt;, I needed a system to &lt;strong&gt;tag objects with colors&lt;/strong&gt; and later sample that information for gameplay mechanics. Crucially, this information needed to be &lt;strong&gt;hidden from the player&lt;/strong&gt;, so it must be rendered off-screen.&lt;/p&gt;</description>
    </item>
    <item>
      <title>(Beta) Project: Quality Assurance</title>
      <link>http://localhost:1313/posts/beta-project-quality-assurance/</link>
      <pubDate>Fri, 01 Aug 2025 00:00:00 +0100</pubDate>
      <guid>http://localhost:1313/posts/beta-project-quality-assurance/</guid>
      <description>&lt;p&gt;&#xA;&lt;figure class=&#34;image-figure not-prose my-8&#34; &#xA;        data-lightbox-enabled=&#34;true&#34;&#xA;        data-gallery-type=&#34;auto&#34;&gt;&#xA;  &lt;div class=&#34;image-container&#34;&gt;&#xA;    &lt;img&#xA;    src=&#34;http://localhost:1313/posts/beta-project-quality-assurance/cover.png&#34;&#xA;    alt=&#34;&#34;&#xA;    title=&#34;Quality Assurance (Beta Snapshot)&#34;&#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;2880&#34;&#xA;    height=&#34;1800&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;http://localhost:1313/posts/beta-project-quality-assurance/cover.png&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;Quality Assurance (Beta Snapshot)&#34; /&gt;&lt;/div&gt;&#xA;&#xA;  &lt;figcaption class=&#34;image-caption&#34;&gt;&#xA;      Quality Assurance (Beta Snapshot)&#xA;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;tldr&#34;&gt;TL;DR&lt;/h3&gt;&#xA;&lt;p&gt;Quality Assurance is a solo game development project under the &lt;code&gt;Sekochi Games&lt;/code&gt; production. It&amp;rsquo;s main game design is inspired by &lt;a href=&#34;https://store.steampowered.com/app/2653790/The_Exit_8/&#34;target=&#34;_blank&#34;&#xA;  class=&#34;relative inline-flex items-center&#34;&#xA;&gt;Exit 8&#xA;  &lt;svg id=&#34;external-link&#34; class=&#34;h-3 w-3 ml-1 absolute top-0 right-0 transform translate-x-2/5 -translate-y-1/3&#34;&#xA;    fill=&#34;none&#34;&#xA;    stroke=&#34;currentColor&#34;&#xA;    viewBox=&#34;0 0 24 24&#34;&gt;&lt;path fill=&#34;none&#34; stroke=&#34;currentColor&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; stroke-width=&#34;2&#34; d=&#34;M15 3h6v6m-11 5L21 3m-3 10v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6&#34;/&gt;&lt;/svg&gt;&#xA;&lt;/a&gt; with a Black Mirror-like story telling. In this game, you are transported into the meta-verse to be a Quality Assurance and make sure every asset is working correctly by inspecting its looks, function, sound, and placement. The game suddenly takes a steep turn depending on the ending you choose.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building a Solo Dungeon Runner Boardgame</title>
      <link>http://localhost:1313/posts/building-a-solo-dungeon-runner-boardgame/</link>
      <pubDate>Tue, 01 Jul 2025 00:00:00 +0100</pubDate>
      <guid>http://localhost:1313/posts/building-a-solo-dungeon-runner-boardgame/</guid>
      <description>&lt;p&gt;&#xA;&lt;figure class=&#34;image-figure not-prose my-8&#34; &#xA;        data-lightbox-enabled=&#34;true&#34;&#xA;        data-gallery-type=&#34;auto&#34;&gt;&#xA;  &lt;div class=&#34;image-container&#34;&gt;&#xA;    &lt;img&#xA;    src=&#34;http://localhost:1313/posts/building-a-solo-dungeon-runner-boardgame/cover.jpg&#34;&#xA;    alt=&#34;&#34;&#xA;    title=&#34;Dungeon Run Public Playtesting&#34;&#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;3024&#34;&#xA;    height=&#34;4032&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;http://localhost:1313/posts/building-a-solo-dungeon-runner-boardgame/cover.jpg&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;Dungeon Run Public Playtesting&#34; /&gt;&lt;/div&gt;&#xA;&#xA;  &lt;figcaption class=&#34;image-caption&#34;&gt;&#xA;      Dungeon Run Public Playtesting&#xA;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;With &lt;em&gt;Dungeon Run&lt;/em&gt;, we set out to design a game that fills a unique space in the RPG genre: a short-form, &lt;strong&gt;solo dungeon-crawling board game&lt;/strong&gt; with strategic depth and high replayability. While most RPG-inspired board games tend to be sprawling, multiplayer experiences that require hours to play, &lt;em&gt;Dungeon Run&lt;/em&gt; was conceived as a &lt;strong&gt;30–60 minute adventure&lt;/strong&gt;, built for players who love to explore, experiment, and overcome challenges on their own.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Visualizing Brno in Unity</title>
      <link>http://localhost:1313/posts/visualizing-brno-in-unity/</link>
      <pubDate>Thu, 15 May 2025 00:00:00 +0100</pubDate>
      <guid>http://localhost:1313/posts/visualizing-brno-in-unity/</guid>
      <description>&lt;style&gt;&#xA;  &#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 {&#xA;  width: 100%;&#xA;}&#xA;&#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 .masonry-container {&#xA;  width: 100%;&#xA;  position: relative;&#xA;}&#xA;&#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 .masonry-item {&#xA;  display: inline-block;&#xA;  width: 100%;&#xA;  margin-bottom: 15px;&#xA;  break-inside: avoid;&#xA;  box-sizing: border-box;&#xA;}&#xA;&#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 .masonry-item img {&#xA;  width: 100%;&#xA;  height: auto;&#xA;  display: block;&#xA;  transition: transform 0.3s ease-in-out;&#xA;  border-radius: 0.5rem;&#xA;}&#xA;&#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 .glightbox {&#xA;  display: block;&#xA;  text-decoration: none;&#xA;  overflow: hidden;&#xA;  cursor: pointer;&#xA;  border-radius: 0.5rem;&#xA;}&#xA;&#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 .glightbox:hover,&#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 .glightbox:focus {&#xA;  text-decoration: none;&#xA;  outline: none;&#xA;}&#xA;&#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 .masonry-item:hover img {&#xA;  transform: scale(1.05);&#xA;}&#xA;&#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 .masonry-item {&#xA;  overflow: hidden;&#xA;  border-radius: 0.5rem;&#xA;}&#xA;&lt;/style&gt;&#xA;&#xA;&lt;div class=&#34;masonry-gallery&#34; &#xA;     id=&#34;masonry-0b8f0d8456b9e4543b946041e42eaca9-1&#34;&#xA;     data-columns=&#34;3&#34;&#xA;     data-gutter=&#34;15&#34;&#xA;     data-animate=&#34;true&#34;&#xA;     data-use-transform=&#34;true&#34;&#xA;     data-center=&#34;true&#34;&#xA;     data-max-columns=&#34;5&#34;&#xA;     data-lightbox=&#34;true&#34;&gt;&#xA;&#xA;  &lt;div class=&#34;masonry-container&#34;&gt;&#xA;    &lt;div class=&#34;masonry-item&#34;&gt;&lt;a href=&#34;http://localhost:1313/posts/visualizing-brno-in-unity/preview.png&#34; &#xA;             class=&#34;glightbox&#34;&#xA;             data-gallery=&#34;masonry-0b8f0d8456b9e4543b946041e42eaca9-1&#34;data-description=&#34;&lt;h4&gt;GISMU Snapshot #1&lt;/h4&gt;&#34;&gt;&#xA;            &#xA;            &lt;img&#xA;    src=&#34;http://localhost:1313/posts/visualizing-brno-in-unity/preview.png&#34;&#xA;    alt=&#34;&#34;&#xA;    title=&#34;GISMU Snapshot #1&#34;&#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;1919&#34;&#xA;    height=&#34;1079&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;http://localhost:1313/posts/visualizing-brno-in-unity/preview.png&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;GISMU Snapshot #1&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;masonry-item&#34;&gt;&lt;a href=&#34;http://localhost:1313/posts/visualizing-brno-in-unity/snapshot-a.png&#34; &#xA;             class=&#34;glightbox&#34;&#xA;             data-gallery=&#34;masonry-0b8f0d8456b9e4543b946041e42eaca9-1&#34;data-description=&#34;&lt;h4&gt;GISMU Snapshot #2&lt;/h4&gt;&#34;&gt;&#xA;            &#xA;            &lt;img&#xA;    src=&#34;http://localhost:1313/posts/visualizing-brno-in-unity/snapshot-a.png&#34;&#xA;    alt=&#34;&#34;&#xA;    title=&#34;GISMU Snapshot #2&#34;&#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;1919&#34;&#xA;    height=&#34;1079&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;http://localhost:1313/posts/visualizing-brno-in-unity/snapshot-a.png&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;GISMU Snapshot #2&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;masonry-item&#34;&gt;&lt;a href=&#34;http://localhost:1313/posts/visualizing-brno-in-unity/snapshot-b.png&#34; &#xA;             class=&#34;glightbox&#34;&#xA;             data-gallery=&#34;masonry-0b8f0d8456b9e4543b946041e42eaca9-1&#34;data-description=&#34;&lt;h4&gt;GISMU Snapshot #3&lt;/h4&gt;&#34;&gt;&#xA;            &#xA;            &lt;img&#xA;    src=&#34;http://localhost:1313/posts/visualizing-brno-in-unity/snapshot-b.png&#34;&#xA;    alt=&#34;&#34;&#xA;    title=&#34;GISMU Snapshot #3&#34;&#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;1919&#34;&#xA;    height=&#34;1079&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;http://localhost:1313/posts/visualizing-brno-in-unity/snapshot-b.png&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;GISMU Snapshot #3&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;script&gt;&#xA;(function() {&#xA;  const containerId = &#39;masonry-0b8f0d8456b9e4543b946041e42eaca9-1&#39;;&#xA;  const config = {&#xA;    columns:  3 ,&#xA;    gutter:  15 ,&#xA;    maxColumns:  5 ,&#xA;    lightbox:  true ,&#xA;    animate: &#34;true&#34;,&#xA;    useTransform: &#34;true&#34;,&#xA;    center: &#34;true&#34;&#xA;  };&#xA;  &#xA;  console.log(&#39;Initializing masonry gallery:&#39;, containerId, config);&#xA;  &#xA;  function initMasonryGallery() {&#xA;    const container = document.getElementById(containerId);&#xA;    if (!container) {&#xA;      console.error(&#39;Masonry container not found:&#39;, containerId);&#xA;      return;&#xA;    }&#xA;    &#xA;    const masonryContainer = container.querySelector(&#39;.masonry-container&#39;);&#xA;    if (!masonryContainer) {&#xA;      console.error(&#39;Masonry inner container not found&#39;);&#xA;      return;&#xA;    }&#xA;    &#xA;    &#xA;    if (typeof Macy === &#39;undefined&#39;) {&#xA;      console.error(&#39;Macy.js not loaded&#39;);&#xA;      return;&#xA;    }&#xA;    &#xA;    console.log(&#39;Found container and Macy, initializing...&#39;);&#xA;    &#xA;    &#xA;    try {&#xA;      const macyInstance = Macy({&#xA;        container: masonryContainer,&#xA;        trueOrder: false,&#xA;        waitForImages: true,&#xA;        useOwnImageLoader: false,&#xA;        debug: false,&#xA;        mobileFirst: true,&#xA;        columns: config.columns,&#xA;        margin: {&#xA;          x: config.gutter,&#xA;          y: config.gutter&#xA;        },&#xA;        breakAt: {&#xA;          1400: Math.min(config.maxColumns, config.columns),&#xA;          1200: Math.min(config.maxColumns, config.columns),&#xA;          940: Math.min(config.maxColumns, config.columns),  &#xA;          768: Math.min(3, config.columns),&#xA;          520: Math.min(2, config.columns),&#xA;          400: 1&#xA;        }&#xA;      });&#xA;      &#xA;      console.log(&#39;Macy initialized successfully for&#39;, containerId);&#xA;      &#xA;      &#xA;      const images = masonryContainer.querySelectorAll(&#39;img&#39;);&#xA;      let loadedImages = 0;&#xA;      const totalImages = images.length;&#xA;      &#xA;      function onImageLoad() {&#xA;        loadedImages++;&#xA;        console.log(`Image ${loadedImages}/${totalImages} loaded`);&#xA;        &#xA;        if (loadedImages === totalImages) {&#xA;          setTimeout(() =&gt; {&#xA;            if (macyInstance &amp;&amp; macyInstance.reCalculate) {&#xA;              macyInstance.reCalculate(true);&#xA;              console.log(&#39;Macy layout recalculated after all images loaded&#39;);&#xA;            }&#xA;          }, 100);&#xA;        }&#xA;      }&#xA;      &#xA;      images.forEach(img =&gt; {&#xA;        if (img.complete) {&#xA;          onImageLoad();&#xA;        } else {&#xA;          img.addEventListener(&#39;load&#39;, onImageLoad);&#xA;          img.addEventListener(&#39;error&#39;, onImageLoad);&#xA;        }&#xA;      });&#xA;      &#xA;    } catch (error) {&#xA;      console.error(&#39;Error initializing Macy:&#39;, error);&#xA;    }&#xA;    &#xA;    &#xA;    if (config.lightbox) {&#xA;      if (typeof GLightbox !== &#39;undefined&#39;) {&#xA;        try {&#xA;          &#xA;          let globalLightboxConfig = window.HUGO_GALLERY_CONFIG?.lightbox_options || {};&#xA;          &#xA;          if (typeof globalLightboxConfig === &#39;string&#39;) {&#xA;            try {&#xA;              globalLightboxConfig = JSON.parse(globalLightboxConfig);&#xA;            } catch (e) {&#xA;              console.error(&#39;Error parsing masonry GLightbox config:&#39;, e);&#xA;              globalLightboxConfig = {};&#xA;            }&#xA;          }          &#xA;          const lightbox = GLightbox({&#xA;            selector: `#${containerId} .glightbox`,&#xA;            touchNavigation: globalLightboxConfig.touchnavigation ?? globalLightboxConfig.touchNavigation ?? true,&#xA;            loop: globalLightboxConfig.loop ?? true,&#xA;            draggable: globalLightboxConfig.draggable ?? true,&#xA;            zoomable: globalLightboxConfig.zoomable ?? true,&#xA;            preload: globalLightboxConfig.preload ?? true,&#xA;            width: globalLightboxConfig.width || &#39;90vw&#39;,&#xA;            height: globalLightboxConfig.height || &#39;90vh&#39;,&#xA;            descPosition: globalLightboxConfig.descposition || globalLightboxConfig.descPosition || &#39;bottom&#39;,&#xA;            onOpen: () =&gt; {&#xA;              console.log(&#39;GLightbox opened for&#39;, containerId);&#xA;            }&#xA;          });&#xA;          &#xA;          console.log(&#39;GLightbox initialized successfully for&#39;, containerId, &#39;with global config&#39;);&#xA;          &#xA;        } catch (error) {&#xA;          console.error(&#39;Error initializing GLightbox:&#39;, error);&#xA;        }&#xA;      } else {&#xA;        console.error(&#39;GLightbox not loaded but lightbox is enabled&#39;);&#xA;      }&#xA;    }&#xA;  }&#xA;  &#xA;  &#xA;  function waitForLibraries() {&#xA;    let attempts = 0;&#xA;    const maxAttempts = 50;&#xA;    &#xA;    function check() {&#xA;      attempts++;&#xA;      &#xA;      const macyReady = typeof Macy !== &#39;undefined&#39;;&#xA;      const lightboxReady = !config.lightbox || typeof GLightbox !== &#39;undefined&#39;;&#xA;      &#xA;      if (macyReady &amp;&amp; lightboxReady) {&#xA;        initMasonryGallery();&#xA;      } else if (attempts &lt; maxAttempts) {&#xA;        setTimeout(check, 100);&#xA;      } else {&#xA;        console.error(&#39;Timeout waiting for libraries. Macy:&#39;, macyReady, &#39;GLightbox:&#39;, lightboxReady);&#xA;      }&#xA;    }&#xA;    &#xA;    check();&#xA;  }&#xA;  &#xA;  &#xA;  if (document.readyState === &#39;loading&#39;) {&#xA;    document.addEventListener(&#39;DOMContentLoaded&#39;, waitForLibraries);&#xA;  } else {&#xA;    setTimeout(waitForLibraries, 50);&#xA;  }&#xA;})();&#xA;&lt;/script&gt;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;During my time at &lt;strong&gt;HCILab&lt;/strong&gt;, under the supervision of &lt;strong&gt;Jonas Rosecký&lt;/strong&gt;, I developed &lt;strong&gt;GISMU&lt;/strong&gt;, a Unity-based system for visualizing geospatial data in 3D. The project focused on Brno, CZ, exploring how terrain, transport, and infrastructure data could be transformed into an interactive environment — with future potential for VR exploration.&lt;/p&gt;</description>
    </item>
    <item>
      <title>VoidPix: Generating Pixelated Skybox</title>
      <link>http://localhost:1313/posts/voidpix-generating-pixelated-skybox/</link>
      <pubDate>Tue, 18 Feb 2025 00:00:00 +0100</pubDate>
      <guid>http://localhost:1313/posts/voidpix-generating-pixelated-skybox/</guid>
      <description>&lt;style&gt;&#xA;  &#xA;#masonry-b8e6358b0f95e82418ea6fcbee6ff3ae-1 {&#xA;  width: 100%;&#xA;}&#xA;&#xA;#masonry-b8e6358b0f95e82418ea6fcbee6ff3ae-1 .masonry-container {&#xA;  width: 100%;&#xA;  position: relative;&#xA;}&#xA;&#xA;#masonry-b8e6358b0f95e82418ea6fcbee6ff3ae-1 .masonry-item {&#xA;  display: inline-block;&#xA;  width: 100%;&#xA;  margin-bottom: 15px;&#xA;  break-inside: avoid;&#xA;  box-sizing: border-box;&#xA;}&#xA;&#xA;#masonry-b8e6358b0f95e82418ea6fcbee6ff3ae-1 .masonry-item img {&#xA;  width: 100%;&#xA;  height: auto;&#xA;  display: block;&#xA;  transition: transform 0.3s ease-in-out;&#xA;  border-radius: 0.5rem;&#xA;}&#xA;&#xA;#masonry-b8e6358b0f95e82418ea6fcbee6ff3ae-1 .glightbox {&#xA;  display: block;&#xA;  text-decoration: none;&#xA;  overflow: hidden;&#xA;  cursor: pointer;&#xA;  border-radius: 0.5rem;&#xA;}&#xA;&#xA;#masonry-b8e6358b0f95e82418ea6fcbee6ff3ae-1 .glightbox:hover,&#xA;#masonry-b8e6358b0f95e82418ea6fcbee6ff3ae-1 .glightbox:focus {&#xA;  text-decoration: none;&#xA;  outline: none;&#xA;}&#xA;&#xA;#masonry-b8e6358b0f95e82418ea6fcbee6ff3ae-1 .masonry-item:hover img {&#xA;  transform: scale(1.05);&#xA;}&#xA;&#xA;#masonry-b8e6358b0f95e82418ea6fcbee6ff3ae-1 .masonry-item {&#xA;  overflow: hidden;&#xA;  border-radius: 0.5rem;&#xA;}&#xA;&lt;/style&gt;&#xA;&#xA;&lt;div class=&#34;masonry-gallery&#34; &#xA;     id=&#34;masonry-b8e6358b0f95e82418ea6fcbee6ff3ae-1&#34;&#xA;     data-columns=&#34;3&#34;&#xA;     data-gutter=&#34;15&#34;&#xA;     data-animate=&#34;true&#34;&#xA;     data-use-transform=&#34;true&#34;&#xA;     data-center=&#34;true&#34;&#xA;     data-max-columns=&#34;5&#34;&#xA;     data-lightbox=&#34;true&#34;&gt;&#xA;&#xA;  &lt;div class=&#34;masonry-container&#34;&gt;&#xA;    &lt;div class=&#34;masonry-item&#34;&gt;&lt;a href=&#34;http://localhost:1313/posts/voidpix-generating-pixelated-skybox/blink.png&#34; &#xA;             class=&#34;glightbox&#34;&#xA;             data-gallery=&#34;masonry-b8e6358b0f95e82418ea6fcbee6ff3ae-1&#34;data-description=&#34;&lt;h4&gt;VoidPix Blink&lt;/h4&gt;&#34;&gt;&#xA;            &#xA;            &lt;img&#xA;    src=&#34;http://localhost:1313/posts/voidpix-generating-pixelated-skybox/blink.png&#34;&#xA;    alt=&#34;&#34;&#xA;    title=&#34;VoidPix Blink&#34;&#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;630&#34;&#xA;    height=&#34;500&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;http://localhost:1313/posts/voidpix-generating-pixelated-skybox/blink.png&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;VoidPix Blink&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;masonry-item&#34;&gt;&lt;a href=&#34;http://localhost:1313/posts/voidpix-generating-pixelated-skybox/chasm.png&#34; &#xA;             class=&#34;glightbox&#34;&#xA;             data-gallery=&#34;masonry-b8e6358b0f95e82418ea6fcbee6ff3ae-1&#34;data-description=&#34;&lt;h4&gt;VoidPix Chasm&lt;/h4&gt;&#34;&gt;&#xA;            &#xA;            &lt;img&#xA;    src=&#34;http://localhost:1313/posts/voidpix-generating-pixelated-skybox/chasm.png&#34;&#xA;    alt=&#34;&#34;&#xA;    title=&#34;VoidPix Chasm&#34;&#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;630&#34;&#xA;    height=&#34;500&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;http://localhost:1313/posts/voidpix-generating-pixelated-skybox/chasm.png&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;VoidPix Chasm&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;masonry-item&#34;&gt;&lt;a href=&#34;http://localhost:1313/posts/voidpix-generating-pixelated-skybox/infection.png&#34; &#xA;             class=&#34;glightbox&#34;&#xA;             data-gallery=&#34;masonry-b8e6358b0f95e82418ea6fcbee6ff3ae-1&#34;data-description=&#34;&lt;h4&gt;VoidPix Infection&lt;/h4&gt;&#34;&gt;&#xA;            &#xA;            &lt;img&#xA;    src=&#34;http://localhost:1313/posts/voidpix-generating-pixelated-skybox/infection.png&#34;&#xA;    alt=&#34;&#34;&#xA;    title=&#34;VoidPix Infection&#34;&#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;630&#34;&#xA;    height=&#34;500&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;http://localhost:1313/posts/voidpix-generating-pixelated-skybox/infection.png&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;VoidPix Infection&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;script&gt;&#xA;(function() {&#xA;  const containerId = &#39;masonry-b8e6358b0f95e82418ea6fcbee6ff3ae-1&#39;;&#xA;  const config = {&#xA;    columns:  3 ,&#xA;    gutter:  15 ,&#xA;    maxColumns:  5 ,&#xA;    lightbox:  true ,&#xA;    animate: &#34;true&#34;,&#xA;    useTransform: &#34;true&#34;,&#xA;    center: &#34;true&#34;&#xA;  };&#xA;  &#xA;  console.log(&#39;Initializing masonry gallery:&#39;, containerId, config);&#xA;  &#xA;  function initMasonryGallery() {&#xA;    const container = document.getElementById(containerId);&#xA;    if (!container) {&#xA;      console.error(&#39;Masonry container not found:&#39;, containerId);&#xA;      return;&#xA;    }&#xA;    &#xA;    const masonryContainer = container.querySelector(&#39;.masonry-container&#39;);&#xA;    if (!masonryContainer) {&#xA;      console.error(&#39;Masonry inner container not found&#39;);&#xA;      return;&#xA;    }&#xA;    &#xA;    &#xA;    if (typeof Macy === &#39;undefined&#39;) {&#xA;      console.error(&#39;Macy.js not loaded&#39;);&#xA;      return;&#xA;    }&#xA;    &#xA;    console.log(&#39;Found container and Macy, initializing...&#39;);&#xA;    &#xA;    &#xA;    try {&#xA;      const macyInstance = Macy({&#xA;        container: masonryContainer,&#xA;        trueOrder: false,&#xA;        waitForImages: true,&#xA;        useOwnImageLoader: false,&#xA;        debug: false,&#xA;        mobileFirst: true,&#xA;        columns: config.columns,&#xA;        margin: {&#xA;          x: config.gutter,&#xA;          y: config.gutter&#xA;        },&#xA;        breakAt: {&#xA;          1400: Math.min(config.maxColumns, config.columns),&#xA;          1200: Math.min(config.maxColumns, config.columns),&#xA;          940: Math.min(config.maxColumns, config.columns),  &#xA;          768: Math.min(3, config.columns),&#xA;          520: Math.min(2, config.columns),&#xA;          400: 1&#xA;        }&#xA;      });&#xA;      &#xA;      console.log(&#39;Macy initialized successfully for&#39;, containerId);&#xA;      &#xA;      &#xA;      const images = masonryContainer.querySelectorAll(&#39;img&#39;);&#xA;      let loadedImages = 0;&#xA;      const totalImages = images.length;&#xA;      &#xA;      function onImageLoad() {&#xA;        loadedImages++;&#xA;        console.log(`Image ${loadedImages}/${totalImages} loaded`);&#xA;        &#xA;        if (loadedImages === totalImages) {&#xA;          setTimeout(() =&gt; {&#xA;            if (macyInstance &amp;&amp; macyInstance.reCalculate) {&#xA;              macyInstance.reCalculate(true);&#xA;              console.log(&#39;Macy layout recalculated after all images loaded&#39;);&#xA;            }&#xA;          }, 100);&#xA;        }&#xA;      }&#xA;      &#xA;      images.forEach(img =&gt; {&#xA;        if (img.complete) {&#xA;          onImageLoad();&#xA;        } else {&#xA;          img.addEventListener(&#39;load&#39;, onImageLoad);&#xA;          img.addEventListener(&#39;error&#39;, onImageLoad);&#xA;        }&#xA;      });&#xA;      &#xA;    } catch (error) {&#xA;      console.error(&#39;Error initializing Macy:&#39;, error);&#xA;    }&#xA;    &#xA;    &#xA;    if (config.lightbox) {&#xA;      if (typeof GLightbox !== &#39;undefined&#39;) {&#xA;        try {&#xA;          &#xA;          let globalLightboxConfig = window.HUGO_GALLERY_CONFIG?.lightbox_options || {};&#xA;          &#xA;          if (typeof globalLightboxConfig === &#39;string&#39;) {&#xA;            try {&#xA;              globalLightboxConfig = JSON.parse(globalLightboxConfig);&#xA;            } catch (e) {&#xA;              console.error(&#39;Error parsing masonry GLightbox config:&#39;, e);&#xA;              globalLightboxConfig = {};&#xA;            }&#xA;          }          &#xA;          const lightbox = GLightbox({&#xA;            selector: `#${containerId} .glightbox`,&#xA;            touchNavigation: globalLightboxConfig.touchnavigation ?? globalLightboxConfig.touchNavigation ?? true,&#xA;            loop: globalLightboxConfig.loop ?? true,&#xA;            draggable: globalLightboxConfig.draggable ?? true,&#xA;            zoomable: globalLightboxConfig.zoomable ?? true,&#xA;            preload: globalLightboxConfig.preload ?? true,&#xA;            width: globalLightboxConfig.width || &#39;90vw&#39;,&#xA;            height: globalLightboxConfig.height || &#39;90vh&#39;,&#xA;            descPosition: globalLightboxConfig.descposition || globalLightboxConfig.descPosition || &#39;bottom&#39;,&#xA;            onOpen: () =&gt; {&#xA;              console.log(&#39;GLightbox opened for&#39;, containerId);&#xA;            }&#xA;          });&#xA;          &#xA;          console.log(&#39;GLightbox initialized successfully for&#39;, containerId, &#39;with global config&#39;);&#xA;          &#xA;        } catch (error) {&#xA;          console.error(&#39;Error initializing GLightbox:&#39;, error);&#xA;        }&#xA;      } else {&#xA;        console.error(&#39;GLightbox not loaded but lightbox is enabled&#39;);&#xA;      }&#xA;    }&#xA;  }&#xA;  &#xA;  &#xA;  function waitForLibraries() {&#xA;    let attempts = 0;&#xA;    const maxAttempts = 50;&#xA;    &#xA;    function check() {&#xA;      attempts++;&#xA;      &#xA;      const macyReady = typeof Macy !== &#39;undefined&#39;;&#xA;      const lightboxReady = !config.lightbox || typeof GLightbox !== &#39;undefined&#39;;&#xA;      &#xA;      if (macyReady &amp;&amp; lightboxReady) {&#xA;        initMasonryGallery();&#xA;      } else if (attempts &lt; maxAttempts) {&#xA;        setTimeout(check, 100);&#xA;      } else {&#xA;        console.error(&#39;Timeout waiting for libraries. Macy:&#39;, macyReady, &#39;GLightbox:&#39;, lightboxReady);&#xA;      }&#xA;    }&#xA;    &#xA;    check();&#xA;  }&#xA;  &#xA;  &#xA;  if (document.readyState === &#39;loading&#39;) {&#xA;    document.addEventListener(&#39;DOMContentLoaded&#39;, waitForLibraries);&#xA;  } else {&#xA;    setTimeout(waitForLibraries, 50);&#xA;  }&#xA;})();&#xA;&lt;/script&gt;&#xA;&lt;p&gt;VoidPix is an asset pack based on generated procedural skyboxes in 1K resolution. It includes 22 unique procedurally generated skyboxes. No AI is involved, purely random sampling and generation technique.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Winning Micro Jam: Void</title>
      <link>http://localhost:1313/posts/winning-micro-jam-void/</link>
      <pubDate>Sun, 09 Feb 2025 00:00:00 +0100</pubDate>
      <guid>http://localhost:1313/posts/winning-micro-jam-void/</guid>
      <description>&lt;p&gt;&#xA;&lt;figure class=&#34;image-figure not-prose my-8&#34; &#xA;        data-lightbox-enabled=&#34;true&#34;&#xA;        data-gallery-type=&#34;auto&#34;&gt;&#xA;  &lt;div class=&#34;image-container&#34;&gt;&#xA;    &lt;img&#xA;    src=&#34;http://localhost:1313/posts/winning-micro-jam-void/preview.png&#34;&#xA;    alt=&#34;&#34;&#xA;    title=&#34;Devoid Preview&#34;&#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;2880&#34;&#xA;    height=&#34;1800&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;http://localhost:1313/posts/winning-micro-jam-void/preview.png&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;Devoid Preview&#34; /&gt;&lt;/div&gt;&#xA;&#xA;  &lt;figcaption class=&#34;image-caption&#34;&gt;&#xA;      Devoid Preview&#xA;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;Micro Jam&lt;/strong&gt; is a competitive 48-hour game jam for developers of all levels, from beginners to veterans. Held bi-weekly, it features a prize pool of over $110, sponsored by Mini Script. For Jam 33, the theme was &lt;strong&gt;“Void”&lt;/strong&gt;, with the prerequisite &lt;strong&gt;“Death is not the end.”&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;After brainstorming a few concepts, I decided to interpret both literally: a game where death itself drives progress. My goal was to fully embrace the theme and win &lt;em&gt;Best Use of Theme&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sphere Ray Tracing in OpenGL</title>
      <link>http://localhost:1313/posts/sphere-ray-tracing-in-opengl/</link>
      <pubDate>Tue, 28 Jan 2025 00:00:00 +0100</pubDate>
      <guid>http://localhost:1313/posts/sphere-ray-tracing-in-opengl/</guid>
      <description>&lt;p&gt;&#xA;&lt;figure class=&#34;image-figure not-prose my-8&#34; &#xA;        data-lightbox-enabled=&#34;true&#34;&#xA;        data-gallery-type=&#34;auto&#34;&gt;&#xA;  &lt;div class=&#34;image-container&#34;&gt;&#xA;    &lt;img&#xA;    src=&#34;http://localhost:1313/posts/sphere-ray-tracing-in-opengl/demo.gif&#34;&#xA;    alt=&#34;&#34;&#xA;    title=&#34;Preview&#34;&#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;1280&#34;&#xA;    height=&#34;716&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;http://localhost:1313/posts/sphere-ray-tracing-in-opengl/demo.gif&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;Preview&#34; /&gt;&lt;/div&gt;&#xA;&#xA;  &lt;figcaption class=&#34;image-caption&#34;&gt;&#xA;      Preview&#xA;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;This project demonstrates &lt;strong&gt;ray tracing and particle simulation&lt;/strong&gt; using OpenGL. The scene combines static models, dynamic lights, and particle effects to showcase soft shadows, ambient occlusion, and real-time simulation.&lt;/p&gt;&#xA;&lt;h3 id=&#34;approach&#34;&gt;Approach&lt;/h3&gt;&#xA;&lt;p&gt;The scene is built using a hybrid pipeline:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Ray Tracing&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Static snowman model and dynamic light spheres are ray-traced.&lt;/li&gt;&#xA;&lt;li&gt;Soft shadows are computed using adjustable &lt;strong&gt;sample count&lt;/strong&gt; and &lt;strong&gt;light radius&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Spherical Ambient Occlusion&lt;/strong&gt; enhances depth perception and realism.&lt;/li&gt;&#xA;&lt;li&gt;Early exit optimization is applied to rays with low attenuation for better performance.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Particle Simulation&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mirror using Offscreen Rendering and Stencil Mask in OpenGL</title>
      <link>http://localhost:1313/posts/mirror-using-offscreen-rendering-and-stencil-mask-in-opengl/</link>
      <pubDate>Thu, 28 Nov 2024 00:00:00 +0100</pubDate>
      <guid>http://localhost:1313/posts/mirror-using-offscreen-rendering-and-stencil-mask-in-opengl/</guid>
      <description>&lt;p&gt;&#xA;&lt;figure class=&#34;image-figure not-prose my-8&#34; &#xA;        data-lightbox-enabled=&#34;true&#34;&#xA;        data-gallery-type=&#34;auto&#34;&gt;&#xA;  &lt;div class=&#34;image-container&#34;&gt;&#xA;    &lt;img&#xA;    src=&#34;http://localhost:1313/posts/mirror-using-offscreen-rendering-and-stencil-mask-in-opengl/demo.gif&#34;&#xA;    alt=&#34;&#34;&#xA;    title=&#34;Preview&#34;&#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;1280&#34;&#xA;    height=&#34;708&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;http://localhost:1313/posts/mirror-using-offscreen-rendering-and-stencil-mask-in-opengl/demo.gif&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;Preview&#34; /&gt;&lt;/div&gt;&#xA;&#xA;  &lt;figcaption class=&#34;image-caption&#34;&gt;&#xA;      Preview&#xA;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;This project demonstrates how to create a &lt;strong&gt;mirror effect in OpenGL&lt;/strong&gt; using stencil buffers, framebuffers, and object masking. The result is a composed scene where the mirror view is rendered realistically, with optional blur outside masked objects.&lt;/p&gt;&#xA;&lt;h3 id=&#34;approach&#34;&gt;Approach&lt;/h3&gt;&#xA;&lt;p&gt;The mirror was built using a multi-pass rendering pipeline:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Mirror Camera Transformation&lt;/strong&gt;&lt;br&gt;&#xA;The mirror camera is derived from the main camera by reflecting its view matrix across the mirror plane.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Making a Fast and Featureful Color Changing Tool</title>
      <link>http://localhost:1313/posts/making-a-fast-and-featureful-color-changing-tool/</link>
      <pubDate>Mon, 15 Apr 2024 00:00:00 +0100</pubDate>
      <guid>http://localhost:1313/posts/making-a-fast-and-featureful-color-changing-tool/</guid>
      <description>&lt;p&gt;&#xA;&lt;figure class=&#34;image-figure not-prose my-8&#34; &#xA;        data-lightbox-enabled=&#34;true&#34;&#xA;        data-gallery-type=&#34;auto&#34;&gt;&#xA;  &lt;div class=&#34;image-container&#34;&gt;&#xA;    &lt;img&#xA;    src=&#34;http://localhost:1313/posts/making-a-fast-and-featureful-color-changing-tool/preview.png&#34;&#xA;    alt=&#34;&#34;&#xA;    title=&#34;Paleta Preview&#34;&#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;1024&#34;&#xA;    height=&#34;1024&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;http://localhost:1313/posts/making-a-fast-and-featureful-color-changing-tool/preview.png&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;Paleta Preview&#34; /&gt;&lt;/div&gt;&#xA;&#xA;  &lt;figcaption class=&#34;image-caption&#34;&gt;&#xA;      Paleta Preview&#xA;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;p&gt;Paleta is a powerful Color Palette Extraction and Management Tool designed to enhance visual game assets. It allows designers &amp;amp; developers to extract, convert, mix, minimize, and match color palettes effortlessly.&lt;/p&gt;&#xA;&lt;p&gt;Colors are treated as vectors (RGBA), while palettes are sets of colors supporting union, intersection, addition, and removal. Paleta integrates with Lospec for importing palettes and provides functions for mapping between palettes using distance metrics or custom algorithms. Users can also export palettes or map them onto images.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0800</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description>Learn about Hugo Narrow theme and its technology stack</description>
    </item>
    <item>
      <title>Archives</title>
      <link>http://localhost:1313/archives/_index.fr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/archives/_index.fr/</guid>
      <description></description>
    </item>
    <item>
      <title>アーカイブ</title>
      <link>http://localhost:1313/archives/_index.ja/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/archives/_index.ja/</guid>
      <description></description>
    </item>
    <item>
      <title>归档</title>
      <link>http://localhost:1313/archives/_index.zh-cn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/archives/_index.zh-cn/</guid>
      <description></description>
    </item>
  </channel>
</rss>
