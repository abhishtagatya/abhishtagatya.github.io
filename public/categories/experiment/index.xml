<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Experiment on Abhishta</title>
    <link>http://localhost:58596/categories/experiment/</link>
    <description>Recent content in Experiment on Abhishta</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 14 Jun 2025 00:00:00 +0100</lastBuildDate>
    <atom:link href="http://localhost:58596/categories/experiment/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Realistic Wave Simulation in Unity URP</title>
      <link>http://localhost:58596/posts/realistic-wave-simulation-in-unity-urp/</link>
      <pubDate>Sat, 14 Jun 2025 00:00:00 +0100</pubDate>
      <guid>http://localhost:58596/posts/realistic-wave-simulation-in-unity-urp/</guid>
      <description>&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;&#xA;      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/VeVeaHHpKKU?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;This project is a &lt;strong&gt;custom water shader&lt;/strong&gt; written in HLSL for the Universal Render Pipeline (URP). It simulates dynamic waves with configurable functions, domain warping, and physically-inspired lighting, enabling both stylized and semi-realistic water rendering.&lt;/p&gt;&#xA;&lt;h3 id=&#34;core-features&#34;&gt;Core Features&lt;/h3&gt;&#xA;&lt;h4 id=&#34;wave-simulation&#34;&gt;Wave Simulation&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Supports &lt;strong&gt;sine&lt;/strong&gt; and &lt;strong&gt;exponent-based&lt;/strong&gt; wave functions.&lt;/li&gt;&#xA;&lt;li&gt;Multiple overlapping waves can be combined with adjustable &lt;strong&gt;frequency&lt;/strong&gt;, &lt;strong&gt;speed&lt;/strong&gt;, &lt;strong&gt;amplitude&lt;/strong&gt;, and &lt;strong&gt;wave count&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Domain warping&lt;/strong&gt; adds natural randomness and complexity to wave motion.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;normal-reconstruction&#34;&gt;Normal Reconstruction&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Normals are recalculated using central differences for more accurate lighting.&lt;/li&gt;&#xA;&lt;li&gt;Produces realistic reflections and specular highlights that respond to wave motion.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;lighting-and-reflections&#34;&gt;Lighting and Reflections&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Configurable between &lt;strong&gt;PBR lighting&lt;/strong&gt; and &lt;strong&gt;Blinn-Phong&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Supports &lt;strong&gt;environment reflections&lt;/strong&gt; via a cubemap.&lt;/li&gt;&#xA;&lt;li&gt;Adjustable smoothness, metallic, and specular controls for fine-tuning water appearance.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;customization-parameters&#34;&gt;Customization Parameters&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Wave Settings&lt;/strong&gt;: Count, frequency, speed, amplitude.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Warp Settings&lt;/strong&gt;: Frequency, amplitude, speed.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Material Settings&lt;/strong&gt;: Base color, metallic, smoothness, occlusion, specular highlights, and reflection intensity.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;&#xA;&lt;p&gt;The shader demonstrates how to blend &lt;strong&gt;procedural wave displacement&lt;/strong&gt; with &lt;strong&gt;reflection-based lighting&lt;/strong&gt; to simulate believable water surfaces in Unity. By layering domain-warped waves and combining multiple lighting models, it balances flexibility, realism, and artistic control for interactive environments.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Visualizing Brno in Unity</title>
      <link>http://localhost:58596/posts/visualizing-brno-in-unity/</link>
      <pubDate>Thu, 15 May 2025 00:00:00 +0100</pubDate>
      <guid>http://localhost:58596/posts/visualizing-brno-in-unity/</guid>
      <description>&lt;style&gt;&#xA;  &#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 {&#xA;  width: 100%;&#xA;}&#xA;&#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 .masonry-container {&#xA;  width: 100%;&#xA;  position: relative;&#xA;}&#xA;&#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 .masonry-item {&#xA;  display: inline-block;&#xA;  width: 100%;&#xA;  margin-bottom: 15px;&#xA;  break-inside: avoid;&#xA;  box-sizing: border-box;&#xA;}&#xA;&#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 .masonry-item img {&#xA;  width: 100%;&#xA;  height: auto;&#xA;  display: block;&#xA;  transition: transform 0.3s ease-in-out;&#xA;  border-radius: 0.5rem;&#xA;}&#xA;&#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 .glightbox {&#xA;  display: block;&#xA;  text-decoration: none;&#xA;  overflow: hidden;&#xA;  cursor: pointer;&#xA;  border-radius: 0.5rem;&#xA;}&#xA;&#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 .glightbox:hover,&#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 .glightbox:focus {&#xA;  text-decoration: none;&#xA;  outline: none;&#xA;}&#xA;&#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 .masonry-item:hover img {&#xA;  transform: scale(1.05);&#xA;}&#xA;&#xA;#masonry-0b8f0d8456b9e4543b946041e42eaca9-1 .masonry-item {&#xA;  overflow: hidden;&#xA;  border-radius: 0.5rem;&#xA;}&#xA;&lt;/style&gt;&#xA;&#xA;&lt;div class=&#34;masonry-gallery&#34; &#xA;     id=&#34;masonry-0b8f0d8456b9e4543b946041e42eaca9-1&#34;&#xA;     data-columns=&#34;3&#34;&#xA;     data-gutter=&#34;15&#34;&#xA;     data-animate=&#34;true&#34;&#xA;     data-use-transform=&#34;true&#34;&#xA;     data-center=&#34;true&#34;&#xA;     data-max-columns=&#34;5&#34;&#xA;     data-lightbox=&#34;true&#34;&gt;&#xA;&#xA;  &lt;div class=&#34;masonry-container&#34;&gt;&#xA;    &lt;div class=&#34;masonry-item&#34;&gt;&lt;a href=&#34;http://localhost:58596/posts/visualizing-brno-in-unity/preview.png&#34; &#xA;             class=&#34;glightbox&#34;&#xA;             data-gallery=&#34;masonry-0b8f0d8456b9e4543b946041e42eaca9-1&#34;data-description=&#34;&lt;h4&gt;GISMU Snapshot #1&lt;/h4&gt;&#34;&gt;&#xA;            &#xA;            &lt;img&#xA;    src=&#34;http://localhost:58596/posts/visualizing-brno-in-unity/preview.png&#34;&#xA;    alt=&#34;&#34;&#xA;    title=&#34;GISMU Snapshot #1&#34;&#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;1919&#34;&#xA;    height=&#34;1079&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;http://localhost:58596/posts/visualizing-brno-in-unity/preview.png&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;GISMU Snapshot #1&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;masonry-item&#34;&gt;&lt;a href=&#34;http://localhost:58596/posts/visualizing-brno-in-unity/snapshot-a.png&#34; &#xA;             class=&#34;glightbox&#34;&#xA;             data-gallery=&#34;masonry-0b8f0d8456b9e4543b946041e42eaca9-1&#34;data-description=&#34;&lt;h4&gt;GISMU Snapshot #2&lt;/h4&gt;&#34;&gt;&#xA;            &#xA;            &lt;img&#xA;    src=&#34;http://localhost:58596/posts/visualizing-brno-in-unity/snapshot-a.png&#34;&#xA;    alt=&#34;&#34;&#xA;    title=&#34;GISMU Snapshot #2&#34;&#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;1919&#34;&#xA;    height=&#34;1079&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;http://localhost:58596/posts/visualizing-brno-in-unity/snapshot-a.png&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;GISMU Snapshot #2&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;masonry-item&#34;&gt;&lt;a href=&#34;http://localhost:58596/posts/visualizing-brno-in-unity/snapshot-b.png&#34; &#xA;             class=&#34;glightbox&#34;&#xA;             data-gallery=&#34;masonry-0b8f0d8456b9e4543b946041e42eaca9-1&#34;data-description=&#34;&lt;h4&gt;GISMU Snapshot #3&lt;/h4&gt;&#34;&gt;&#xA;            &#xA;            &lt;img&#xA;    src=&#34;http://localhost:58596/posts/visualizing-brno-in-unity/snapshot-b.png&#34;&#xA;    alt=&#34;&#34;&#xA;    title=&#34;GISMU Snapshot #3&#34;&#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;1919&#34;&#xA;    height=&#34;1079&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;http://localhost:58596/posts/visualizing-brno-in-unity/snapshot-b.png&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;GISMU Snapshot #3&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;script&gt;&#xA;(function() {&#xA;  const containerId = &#39;masonry-0b8f0d8456b9e4543b946041e42eaca9-1&#39;;&#xA;  const config = {&#xA;    columns:  3 ,&#xA;    gutter:  15 ,&#xA;    maxColumns:  5 ,&#xA;    lightbox:  true ,&#xA;    animate: &#34;true&#34;,&#xA;    useTransform: &#34;true&#34;,&#xA;    center: &#34;true&#34;&#xA;  };&#xA;  &#xA;  console.log(&#39;Initializing masonry gallery:&#39;, containerId, config);&#xA;  &#xA;  function initMasonryGallery() {&#xA;    const container = document.getElementById(containerId);&#xA;    if (!container) {&#xA;      console.error(&#39;Masonry container not found:&#39;, containerId);&#xA;      return;&#xA;    }&#xA;    &#xA;    const masonryContainer = container.querySelector(&#39;.masonry-container&#39;);&#xA;    if (!masonryContainer) {&#xA;      console.error(&#39;Masonry inner container not found&#39;);&#xA;      return;&#xA;    }&#xA;    &#xA;    &#xA;    if (typeof Macy === &#39;undefined&#39;) {&#xA;      console.error(&#39;Macy.js not loaded&#39;);&#xA;      return;&#xA;    }&#xA;    &#xA;    console.log(&#39;Found container and Macy, initializing...&#39;);&#xA;    &#xA;    &#xA;    try {&#xA;      const macyInstance = Macy({&#xA;        container: masonryContainer,&#xA;        trueOrder: false,&#xA;        waitForImages: true,&#xA;        useOwnImageLoader: false,&#xA;        debug: false,&#xA;        mobileFirst: true,&#xA;        columns: config.columns,&#xA;        margin: {&#xA;          x: config.gutter,&#xA;          y: config.gutter&#xA;        },&#xA;        breakAt: {&#xA;          1400: Math.min(config.maxColumns, config.columns),&#xA;          1200: Math.min(config.maxColumns, config.columns),&#xA;          940: Math.min(config.maxColumns, config.columns),  &#xA;          768: Math.min(3, config.columns),&#xA;          520: Math.min(2, config.columns),&#xA;          400: 1&#xA;        }&#xA;      });&#xA;      &#xA;      console.log(&#39;Macy initialized successfully for&#39;, containerId);&#xA;      &#xA;      &#xA;      const images = masonryContainer.querySelectorAll(&#39;img&#39;);&#xA;      let loadedImages = 0;&#xA;      const totalImages = images.length;&#xA;      &#xA;      function onImageLoad() {&#xA;        loadedImages++;&#xA;        console.log(`Image ${loadedImages}/${totalImages} loaded`);&#xA;        &#xA;        if (loadedImages === totalImages) {&#xA;          setTimeout(() =&gt; {&#xA;            if (macyInstance &amp;&amp; macyInstance.reCalculate) {&#xA;              macyInstance.reCalculate(true);&#xA;              console.log(&#39;Macy layout recalculated after all images loaded&#39;);&#xA;            }&#xA;          }, 100);&#xA;        }&#xA;      }&#xA;      &#xA;      images.forEach(img =&gt; {&#xA;        if (img.complete) {&#xA;          onImageLoad();&#xA;        } else {&#xA;          img.addEventListener(&#39;load&#39;, onImageLoad);&#xA;          img.addEventListener(&#39;error&#39;, onImageLoad);&#xA;        }&#xA;      });&#xA;      &#xA;    } catch (error) {&#xA;      console.error(&#39;Error initializing Macy:&#39;, error);&#xA;    }&#xA;    &#xA;    &#xA;    if (config.lightbox) {&#xA;      if (typeof GLightbox !== &#39;undefined&#39;) {&#xA;        try {&#xA;          &#xA;          let globalLightboxConfig = window.HUGO_GALLERY_CONFIG?.lightbox_options || {};&#xA;          &#xA;          if (typeof globalLightboxConfig === &#39;string&#39;) {&#xA;            try {&#xA;              globalLightboxConfig = JSON.parse(globalLightboxConfig);&#xA;            } catch (e) {&#xA;              console.error(&#39;Error parsing masonry GLightbox config:&#39;, e);&#xA;              globalLightboxConfig = {};&#xA;            }&#xA;          }          &#xA;          const lightbox = GLightbox({&#xA;            selector: `#${containerId} .glightbox`,&#xA;            touchNavigation: globalLightboxConfig.touchnavigation ?? globalLightboxConfig.touchNavigation ?? true,&#xA;            loop: globalLightboxConfig.loop ?? true,&#xA;            draggable: globalLightboxConfig.draggable ?? true,&#xA;            zoomable: globalLightboxConfig.zoomable ?? true,&#xA;            preload: globalLightboxConfig.preload ?? true,&#xA;            width: globalLightboxConfig.width || &#39;90vw&#39;,&#xA;            height: globalLightboxConfig.height || &#39;90vh&#39;,&#xA;            descPosition: globalLightboxConfig.descposition || globalLightboxConfig.descPosition || &#39;bottom&#39;,&#xA;            onOpen: () =&gt; {&#xA;              console.log(&#39;GLightbox opened for&#39;, containerId);&#xA;            }&#xA;          });&#xA;          &#xA;          console.log(&#39;GLightbox initialized successfully for&#39;, containerId, &#39;with global config&#39;);&#xA;          &#xA;        } catch (error) {&#xA;          console.error(&#39;Error initializing GLightbox:&#39;, error);&#xA;        }&#xA;      } else {&#xA;        console.error(&#39;GLightbox not loaded but lightbox is enabled&#39;);&#xA;      }&#xA;    }&#xA;  }&#xA;  &#xA;  &#xA;  function waitForLibraries() {&#xA;    let attempts = 0;&#xA;    const maxAttempts = 50;&#xA;    &#xA;    function check() {&#xA;      attempts++;&#xA;      &#xA;      const macyReady = typeof Macy !== &#39;undefined&#39;;&#xA;      const lightboxReady = !config.lightbox || typeof GLightbox !== &#39;undefined&#39;;&#xA;      &#xA;      if (macyReady &amp;&amp; lightboxReady) {&#xA;        initMasonryGallery();&#xA;      } else if (attempts &lt; maxAttempts) {&#xA;        setTimeout(check, 100);&#xA;      } else {&#xA;        console.error(&#39;Timeout waiting for libraries. Macy:&#39;, macyReady, &#39;GLightbox:&#39;, lightboxReady);&#xA;      }&#xA;    }&#xA;    &#xA;    check();&#xA;  }&#xA;  &#xA;  &#xA;  if (document.readyState === &#39;loading&#39;) {&#xA;    document.addEventListener(&#39;DOMContentLoaded&#39;, waitForLibraries);&#xA;  } else {&#xA;    setTimeout(waitForLibraries, 50);&#xA;  }&#xA;})();&#xA;&lt;/script&gt;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;During my time at &lt;strong&gt;HCILab&lt;/strong&gt;, under the supervision of &lt;strong&gt;Jonas Rosecký&lt;/strong&gt;, I developed &lt;strong&gt;GISMU&lt;/strong&gt;, a Unity-based system for visualizing geospatial data in 3D. The project focused on Brno, CZ, exploring how terrain, transport, and infrastructure data could be transformed into an interactive environment — with future potential for VR exploration.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Making Procedural Clouds using Stacked Perlin in GLSL</title>
      <link>http://localhost:58596/posts/making-procedural-clouds-using-stacked-perlin-in-glsl/</link>
      <pubDate>Sat, 05 Apr 2025 00:00:00 +0100</pubDate>
      <guid>http://localhost:58596/posts/making-procedural-clouds-using-stacked-perlin-in-glsl/</guid>
      <description>&lt;p&gt;&#xA;&lt;figure class=&#34;image-figure not-prose my-8&#34; &#xA;        data-lightbox-enabled=&#34;true&#34;&#xA;        data-gallery-type=&#34;auto&#34;&gt;&#xA;  &lt;div class=&#34;image-container&#34;&gt;&#xA;    &lt;img&#xA;    src=&#34;http://localhost:58596/posts/making-procedural-clouds-using-stacked-perlin-in-glsl/demo.gif&#34;&#xA;    alt=&#34;&#34;&#xA;    title=&#34;Preview (https://www.shadertoy.com/view/W3BGRm)&#34;&#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;1280&#34;&#xA;    height=&#34;720&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;http://localhost:58596/posts/making-procedural-clouds-using-stacked-perlin-in-glsl/demo.gif&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;Preview (https://www.shadertoy.com/view/W3BGRm)&#34; /&gt;&lt;/div&gt;&#xA;&#xA;  &lt;figcaption class=&#34;image-caption&#34;&gt;&#xA;      Preview (&lt;a href=&#34;https://www.shadertoy.com/view/W3BGRm&#34;target=&#34;_blank&#34;&#xA;  class=&#34;relative inline-flex items-center&#34;&#xA;&gt;https://www.shadertoy.com/view/W3BGRm&#xA;  &lt;svg id=&#34;external-link&#34; class=&#34;h-3 w-3 ml-1 absolute top-0 right-0 transform translate-x-2/5 -translate-y-1/3&#34;&#xA;    fill=&#34;none&#34;&#xA;    stroke=&#34;currentColor&#34;&#xA;    viewBox=&#34;0 0 24 24&#34;&gt;&lt;path fill=&#34;none&#34; stroke=&#34;currentColor&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; stroke-width=&#34;2&#34; d=&#34;M15 3h6v6m-11 5L21 3m-3 10v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6&#34;/&gt;&lt;/svg&gt;&#xA;&lt;/a&gt;)&#xA;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;This shader creates a &lt;strong&gt;dynamic sky with drifting clouds&lt;/strong&gt; using &lt;strong&gt;Perlin noise&lt;/strong&gt; and layered blending techniques. Instead of relying on bitmap textures, it generates everything procedurally, making it scalable and resolution-independent.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Making Batik in GLSL</title>
      <link>http://localhost:58596/posts/making-batik-in-glsl/</link>
      <pubDate>Sun, 02 Mar 2025 00:00:00 +0100</pubDate>
      <guid>http://localhost:58596/posts/making-batik-in-glsl/</guid>
      <description>&lt;p&gt;&#xA;&lt;figure class=&#34;image-figure not-prose my-8&#34; &#xA;        data-lightbox-enabled=&#34;true&#34;&#xA;        data-gallery-type=&#34;auto&#34;&gt;&#xA;  &lt;div class=&#34;image-container&#34;&gt;&#xA;    &lt;img&#xA;    src=&#34;http://localhost:58596/posts/making-batik-in-glsl/demo.gif&#34;&#xA;    alt=&#34;&#34;&#xA;    title=&#34;Preview (https://www.shadertoy.com/view/3csXW4)&#34;&#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;1280&#34;&#xA;    height=&#34;720&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;http://localhost:58596/posts/making-batik-in-glsl/demo.gif&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;Preview (https://www.shadertoy.com/view/3csXW4)&#34; /&gt;&lt;/div&gt;&#xA;&#xA;  &lt;figcaption class=&#34;image-caption&#34;&gt;&#xA;      Preview (&lt;a href=&#34;https://www.shadertoy.com/view/3csXW4&#34;target=&#34;_blank&#34;&#xA;  class=&#34;relative inline-flex items-center&#34;&#xA;&gt;https://www.shadertoy.com/view/3csXW4&#xA;  &lt;svg id=&#34;external-link&#34; class=&#34;h-3 w-3 ml-1 absolute top-0 right-0 transform translate-x-2/5 -translate-y-1/3&#34;&#xA;    fill=&#34;none&#34;&#xA;    stroke=&#34;currentColor&#34;&#xA;    viewBox=&#34;0 0 24 24&#34;&gt;&lt;path fill=&#34;none&#34; stroke=&#34;currentColor&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; stroke-width=&#34;2&#34; d=&#34;M15 3h6v6m-11 5L21 3m-3 10v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6&#34;/&gt;&lt;/svg&gt;&#xA;&lt;/a&gt;)&#xA;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;This project explores the generative expression of &lt;strong&gt;Batik&lt;/strong&gt;, a traditional Indonesian textile art, through GLSL shaders. By using noise functions, trigonometric patterns, and domain warping, the shader recreates floral and geometric motifs that resemble Batik designs in a dynamic, procedural form.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Particle Simulation Playground in OpenGL</title>
      <link>http://localhost:58596/posts/particle-simulation-playground-in-opengl/</link>
      <pubDate>Sat, 01 Feb 2025 00:00:00 +0100</pubDate>
      <guid>http://localhost:58596/posts/particle-simulation-playground-in-opengl/</guid>
      <description>&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;This project is a &lt;strong&gt;GPU-accelerated particle simulation&lt;/strong&gt; built with OpenGL. Motion is calculated using &lt;strong&gt;vertex and compute shaders&lt;/strong&gt;, where each particle follows defined rules of interaction and evolution.&lt;/p&gt;&#xA;&lt;p&gt;The playground allows experimenting with different particle behaviors, from simple spawning to complex N-body simulations and mesh surface interactions.&lt;/p&gt;&#xA;&lt;h3 id=&#34;features&#34;&gt;Features&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Spawning Particle Program&lt;/strong&gt;&lt;br&gt;&#xA;Particles spawn with random lifetime, velocity, and color within a defined area.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;figure class=&#34;image-figure not-prose my-8&#34; &#xA;        data-lightbox-enabled=&#34;true&#34;&#xA;        data-gallery-type=&#34;auto&#34;&gt;&#xA;  &lt;div class=&#34;image-container&#34;&gt;&#xA;    &lt;img&#xA;    src=&#34;http://localhost:58596/posts/particle-simulation-playground-in-opengl/spawn.gif&#34;&#xA;    alt=&#34;&#34;&#xA;    &#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;1280&#34;&#xA;    height=&#34;720&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;http://localhost:58596/posts/particle-simulation-playground-in-opengl/spawn.gif&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;&#34; /&gt;&lt;/div&gt;&#xA;&#xA;  &lt;/figure&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sphere Ray Tracing in OpenGL</title>
      <link>http://localhost:58596/posts/sphere-ray-tracing-in-opengl/</link>
      <pubDate>Tue, 28 Jan 2025 00:00:00 +0100</pubDate>
      <guid>http://localhost:58596/posts/sphere-ray-tracing-in-opengl/</guid>
      <description>&lt;p&gt;&#xA;&lt;figure class=&#34;image-figure not-prose my-8&#34; &#xA;        data-lightbox-enabled=&#34;true&#34;&#xA;        data-gallery-type=&#34;auto&#34;&gt;&#xA;  &lt;div class=&#34;image-container&#34;&gt;&#xA;    &lt;img&#xA;    src=&#34;http://localhost:58596/posts/sphere-ray-tracing-in-opengl/demo.gif&#34;&#xA;    alt=&#34;&#34;&#xA;    title=&#34;Preview&#34;&#xA;    &#xA;      &#xA;      &#xA;        &#xA;    width=&#34;1280&#34;&#xA;    height=&#34;716&#34;&#xA;        &#xA;      &#xA;    &#xA;    loading=&#34;lazy&#34;&#xA;    decoding=&#34;async&#34;&#xA;    data-gallery-src=&#34;http://localhost:58596/posts/sphere-ray-tracing-in-opengl/demo.gif&#34;&#xA;    data-gallery-alt=&#34;&#34;&#xA;    data-gallery-title=&#34;Preview&#34; /&gt;&lt;/div&gt;&#xA;&#xA;  &lt;figcaption class=&#34;image-caption&#34;&gt;&#xA;      Preview&#xA;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;This project demonstrates &lt;strong&gt;ray tracing and particle simulation&lt;/strong&gt; using OpenGL. The scene combines static models, dynamic lights, and particle effects to showcase soft shadows, ambient occlusion, and real-time simulation.&lt;/p&gt;&#xA;&lt;h3 id=&#34;approach&#34;&gt;Approach&lt;/h3&gt;&#xA;&lt;p&gt;The scene is built using a hybrid pipeline:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Ray Tracing&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Static snowman model and dynamic light spheres are ray-traced.&lt;/li&gt;&#xA;&lt;li&gt;Soft shadows are computed using adjustable &lt;strong&gt;sample count&lt;/strong&gt; and &lt;strong&gt;light radius&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Spherical Ambient Occlusion&lt;/strong&gt; enhances depth perception and realism.&lt;/li&gt;&#xA;&lt;li&gt;Early exit optimization is applied to rays with low attenuation for better performance.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Particle Simulation&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
